
STM32F103_CAN_LOOPBACK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002634  08002634  00003634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c8  080026c8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026d0  080026d0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d0  080026d0  000036d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026d4  080026d4  000036d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080026d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08002734  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08002734  0000429c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007929  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f7  00000000  00000000  0000b9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054c  00000000  00000000  0000d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e56  00000000  00000000  0000dae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086c7  00000000  00000000  0002493a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084390  00000000  00000000  0002d001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1391  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002118  00000000  00000000  000b13d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b34ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800261c 	.word	0x0800261c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800261c 	.word	0x0800261c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SysTick_Handler>:

#include <main_app.h>


void SysTick_Handler(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000160:	f000 fa6e 	bl	8000640 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000164:	f000 fdde 	bl	8000d24 <HAL_SYSTICK_IRQHandler>


}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}

0800016c <main>:
};



int main(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b09a      	sub	sp, #104	@ 0x68
 8000170:	af00      	add	r7, sp, #0
	SystemClockConfig(CLOCK_FREQ_64MHz);
 8000172:	2040      	movs	r0, #64	@ 0x40
 8000174:	f000 f862 	bl	800023c <SystemClockConfig>

	HAL_Init();
 8000178:	f000 fa1c 	bl	80005b4 <HAL_Init>
	UART1_Init();
 800017c:	f000 f814 	bl	80001a8 <UART1_Init>
	CAN1_Init();
 8000180:	f000 f8c8 	bl	8000314 <CAN1_Init>

	if(HAL_CAN_Start(&hcan1) != HAL_OK){
 8000184:	4807      	ldr	r0, [pc, #28]	@ (80001a4 <main+0x38>)
 8000186:	f000 fb96 	bl	80008b6 <HAL_CAN_Start>
 800018a:	4603      	mov	r3, r0
 800018c:	2b00      	cmp	r3, #0
 800018e:	d002      	beq.n	8000196 <main+0x2a>
		Error_handler(CAN_START_ERROR);
 8000190:	2005      	movs	r0, #5
 8000192:	f000 f831 	bl	80001f8 <Error_handler>

	while(1){
		uint8_t msg[100];


		 CAN1_Tx();
 8000196:	f000 f8fb 	bl	8000390 <CAN1_Tx>
		 HAL_Delay(100);
 800019a:	2064      	movs	r0, #100	@ 0x64
 800019c:	f000 fa6c 	bl	8000678 <HAL_Delay>
	while(1){
 80001a0:	bf00      	nop
 80001a2:	e7f8      	b.n	8000196 <main+0x2a>
 80001a4:	200000c0 	.word	0x200000c0

080001a8 <UART1_Init>:
}



void UART1_Init()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 80001ac:	4b10      	ldr	r3, [pc, #64]	@ (80001f0 <UART1_Init+0x48>)
 80001ae:	4a11      	ldr	r2, [pc, #68]	@ (80001f4 <UART1_Init+0x4c>)
 80001b0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80001b2:	4b0f      	ldr	r3, [pc, #60]	@ (80001f0 <UART1_Init+0x48>)
 80001b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001b8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80001ba:	4b0d      	ldr	r3, [pc, #52]	@ (80001f0 <UART1_Init+0x48>)
 80001bc:	2200      	movs	r2, #0
 80001be:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80001c0:	4b0b      	ldr	r3, [pc, #44]	@ (80001f0 <UART1_Init+0x48>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80001c6:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <UART1_Init+0x48>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80001cc:	4b08      	ldr	r3, [pc, #32]	@ (80001f0 <UART1_Init+0x48>)
 80001ce:	220c      	movs	r2, #12
 80001d0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80001d2:	4b07      	ldr	r3, [pc, #28]	@ (80001f0 <UART1_Init+0x48>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]

	if(HAL_UART_Init(&huart3) != HAL_OK){
 80001d8:	4805      	ldr	r0, [pc, #20]	@ (80001f0 <UART1_Init+0x48>)
 80001da:	f001 fb43 	bl	8001864 <HAL_UART_Init>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <UART1_Init+0x42>
		Error_handler(UART_ERROR);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 f807 	bl	80001f8 <Error_handler>
	}

}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000078 	.word	0x20000078
 80001f4:	40004800 	.word	0x40004800

080001f8 <Error_handler>:

void Error_handler(uint8_t code)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]

   while(1){
		sprintf((char *)msg,"error code: %d\r\n", code);
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	461a      	mov	r2, r3
 8000206:	490a      	ldr	r1, [pc, #40]	@ (8000230 <Error_handler+0x38>)
 8000208:	480a      	ldr	r0, [pc, #40]	@ (8000234 <Error_handler+0x3c>)
 800020a:	f001 fd4f 	bl	8001cac <siprintf>
			HAL_UART_Transmit(&huart3,  msg, (uint16_t)  strlen((char *)msg), HAL_MAX_DELAY);
 800020e:	4809      	ldr	r0, [pc, #36]	@ (8000234 <Error_handler+0x3c>)
 8000210:	f7ff ff9c 	bl	800014c <strlen>
 8000214:	4603      	mov	r3, r0
 8000216:	b29a      	uxth	r2, r3
 8000218:	f04f 33ff 	mov.w	r3, #4294967295
 800021c:	4905      	ldr	r1, [pc, #20]	@ (8000234 <Error_handler+0x3c>)
 800021e:	4806      	ldr	r0, [pc, #24]	@ (8000238 <Error_handler+0x40>)
 8000220:	f001 fb70 	bl	8001904 <HAL_UART_Transmit>
			HAL_Delay(1000);
 8000224:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000228:	f000 fa26 	bl	8000678 <HAL_Delay>
		sprintf((char *)msg,"error code: %d\r\n", code);
 800022c:	bf00      	nop
 800022e:	e7e8      	b.n	8000202 <Error_handler+0xa>
 8000230:	08002634 	.word	0x08002634
 8000234:	200000e8 	.word	0x200000e8
 8000238:	20000078 	.word	0x20000078

0800023c <SystemClockConfig>:
   }

}

void SystemClockConfig(uint8_t clock_freq)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b092      	sub	sp, #72	@ 0x48
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FlashLatency;

	memset(&osc_init,0,sizeof(osc_init)); //there might be garbage values
 8000246:	f107 031c 	add.w	r3, r7, #28
 800024a:	2228      	movs	r2, #40	@ 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fd4c 	bl	8001cec <memset>
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000254:	2301      	movs	r3, #1
 8000256:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_ON;
 8000258:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025c:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000266:	63fb      	str	r3, [r7, #60]	@ 0x3c

    switch(clock_freq){
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	2b20      	cmp	r3, #32
 800026c:	d002      	beq.n	8000274 <SystemClockConfig+0x38>
 800026e:	2b40      	cmp	r3, #64	@ 0x40
 8000270:	d011      	beq.n	8000296 <SystemClockConfig+0x5a>
        	    FlashLatency = FLASH_LATENCY_2;
             break;


     	default:
     		return;
 8000272:	e048      	b.n	8000306 <SystemClockConfig+0xca>
    		osc_init.PLL.PLLMUL = RCC_PLL_MUL8;
 8000274:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000278:	643b      	str	r3, [r7, #64]	@ 0x40
    		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800027a:	230f      	movs	r3, #15
 800027c:	60bb      	str	r3, [r7, #8]
    	    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	60fb      	str	r3, [r7, #12]
    	    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000282:	2380      	movs	r3, #128	@ 0x80
 8000284:	613b      	str	r3, [r7, #16]
    	    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028a:	617b      	str	r3, [r7, #20]
    	    clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	61bb      	str	r3, [r7, #24]
    	    FlashLatency = FLASH_LATENCY_2;
 8000290:	2302      	movs	r3, #2
 8000292:	647b      	str	r3, [r7, #68]	@ 0x44
         break;
 8000294:	e010      	b.n	80002b8 <SystemClockConfig+0x7c>
     		osc_init.PLL.PLLMUL = RCC_PLL_MUL8;
 8000296:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800029a:	643b      	str	r3, [r7, #64]	@ 0x40
        		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800029c:	230f      	movs	r3, #15
 800029e:	60bb      	str	r3, [r7, #8]
        	    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60fb      	str	r3, [r7, #12]
        	    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]
        	    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ac:	617b      	str	r3, [r7, #20]
        	    clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
        	    FlashLatency = FLASH_LATENCY_2;
 80002b2:	2302      	movs	r3, #2
 80002b4:	647b      	str	r3, [r7, #68]	@ 0x44
             break;
 80002b6:	bf00      	nop

    }

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 80002b8:	f107 031c 	add.w	r3, r7, #28
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fec1 	bl	8001044 <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d002      	beq.n	80002ce <SystemClockConfig+0x92>
		Error_handler(CLK_CFG_ERROR);
 80002c8:	2002      	movs	r0, #2
 80002ca:	f7ff ff95 	bl	80001f8 <Error_handler>
	}


	if(HAL_RCC_ClockConfig(&clk_init, FlashLatency) != HAL_OK){
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 f937 	bl	8001548 <HAL_RCC_ClockConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d002      	beq.n	80002e6 <SystemClockConfig+0xaa>
			Error_handler(CLK_CFG_ERROR);
 80002e0:	2002      	movs	r0, #2
 80002e2:	f7ff ff89 	bl	80001f8 <Error_handler>
		}

	__HAL_RCC_HSI_DISABLE(); //Clock powered by HSE, now can disable HSI
 80002e6:	4b09      	ldr	r3, [pc, #36]	@ (800030c <SystemClockConfig+0xd0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]

    //SysTick Configuration for new clock setup
	//Input value is based on HCLK that SysTick would tick every 1 ms.
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000); // one count period is 1/HCLK so it must count HCLK /1000 to get 1 ms
 80002ec:	f001 fa6a 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 80002f0:	4603      	mov	r3, r0
 80002f2:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <SystemClockConfig+0xd4>)
 80002f4:	fba2 2303 	umull	r2, r3, r2, r3
 80002f8:	099b      	lsrs	r3, r3, #6
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fce9 	bl	8000cd2 <HAL_SYSTICK_Config>
    //Configure clk source as HCLK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000300:	2004      	movs	r0, #4
 8000302:	f000 fcf3 	bl	8000cec <HAL_SYSTICK_CLKSourceConfig>


}
 8000306:	3748      	adds	r7, #72	@ 0x48
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	42420000 	.word	0x42420000
 8000310:	10624dd3 	.word	0x10624dd3

08000314 <CAN1_Init>:

void CAN1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	memset(&hcan1,0,sizeof(hcan1)); //there might be garbage values
 8000318:	2228      	movs	r2, #40	@ 0x28
 800031a:	2100      	movs	r1, #0
 800031c:	481a      	ldr	r0, [pc, #104]	@ (8000388 <CAN1_Init+0x74>)
 800031e:	f001 fce5 	bl	8001cec <memset>
	hcan1.Instance = CAN1;
 8000322:	4b19      	ldr	r3, [pc, #100]	@ (8000388 <CAN1_Init+0x74>)
 8000324:	4a19      	ldr	r2, [pc, #100]	@ (800038c <CAN1_Init+0x78>)
 8000326:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000328:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <CAN1_Init+0x74>)
 800032a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032e:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = DISABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <CAN1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <CAN1_Init+0x74>)
 8000338:	2201      	movs	r2, #1
 800033a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <CAN1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <CAN1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <CAN1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <CAN1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	775a      	strb	r2, [r3, #29]

	//Settings for CAN bit timing
	hcan1.Init.Prescaler = 2;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <CAN1_Init+0x74>)
 8000356:	2202      	movs	r2, #2
 8000358:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <CAN1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <CAN1_Init+0x74>)
 8000362:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000366:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <CAN1_Init+0x74>)
 800036a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800036e:	615a      	str	r2, [r3, #20]


	if( HAL_CAN_Init(&hcan1) != HAL_OK){
 8000370:	4805      	ldr	r0, [pc, #20]	@ (8000388 <CAN1_Init+0x74>)
 8000372:	f000 f9a5 	bl	80006c0 <HAL_CAN_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d002      	beq.n	8000382 <CAN1_Init+0x6e>
			Error_handler(CAN_CFG_ERROR);
 800037c:	2001      	movs	r0, #1
 800037e:	f7ff ff3b 	bl	80001f8 <Error_handler>
		}

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	200000c0 	.word	0x200000c0
 800038c:	40006400 	.word	0x40006400

08000390 <CAN1_Tx>:

void CAN1_Tx(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08a      	sub	sp, #40	@ 0x28
 8000394:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef TxHeader;

    uint8_t msg[8] = {'K','A','A','N',' ','I','A','L'};
 8000396:	4a23      	ldr	r2, [pc, #140]	@ (8000424 <CAN1_Tx+0x94>)
 8000398:	f107 0308 	add.w	r3, r7, #8
 800039c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a0:	e883 0003 	stmia.w	r3, {r0, r1}

    uint32_t TxMailbox;

	memset(&TxHeader,0,sizeof(TxHeader)); //there might be garbage values
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	2218      	movs	r2, #24
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 fc9d 	bl	8001cec <memset>
	TxHeader.DLC = 8;
 80003b2:	2308      	movs	r3, #8
 80003b4:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = 0x65D;
 80003b6:	f240 635d 	movw	r3, #1629	@ 0x65d
 80003ba:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR =  CAN_RTR_DATA;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, msg, &TxMailbox) != HAL_OK){
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	f107 0208 	add.w	r2, r7, #8
 80003ca:	f107 0110 	add.w	r1, r7, #16
 80003ce:	4816      	ldr	r0, [pc, #88]	@ (8000428 <CAN1_Tx+0x98>)
 80003d0:	f000 fab5 	bl	800093e <HAL_CAN_AddTxMessage>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <CAN1_Tx+0x50>
		Error_handler(CAN_Tx_ERROR);
 80003da:	2004      	movs	r0, #4
 80003dc:	f7ff ff0c 	bl	80001f8 <Error_handler>
	}

	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 80003e0:	bf00      	nop
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4619      	mov	r1, r3
 80003e6:	4810      	ldr	r0, [pc, #64]	@ (8000428 <CAN1_Tx+0x98>)
 80003e8:	f000 fb78 	bl	8000adc <HAL_CAN_IsTxMessagePending>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d1f7      	bne.n	80003e2 <CAN1_Tx+0x52>
	sprintf((char *)msg,"Message transmitted\r\n");
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	490d      	ldr	r1, [pc, #52]	@ (800042c <CAN1_Tx+0x9c>)
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fc57 	bl	8001cac <siprintf>
			HAL_UART_Transmit(&huart3,  msg, (uint16_t)  strlen((char *)msg), HAL_MAX_DELAY);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff fea2 	bl	800014c <strlen>
 8000408:	4603      	mov	r3, r0
 800040a:	b29a      	uxth	r2, r3
 800040c:	f107 0108 	add.w	r1, r7, #8
 8000410:	f04f 33ff 	mov.w	r3, #4294967295
 8000414:	4806      	ldr	r0, [pc, #24]	@ (8000430 <CAN1_Tx+0xa0>)
 8000416:	f001 fa75 	bl	8001904 <HAL_UART_Transmit>



}
 800041a:	bf00      	nop
 800041c:	3728      	adds	r7, #40	@ 0x28
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	08002660 	.word	0x08002660
 8000428:	200000c0 	.word	0x200000c0
 800042c:	08002648 	.word	0x08002648
 8000430:	20000078 	.word	0x20000078

08000434 <HAL_MspInit>:
 */
#include <main_app.h>


void HAL_MspInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

	// there would be a HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) call here.
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000438:	2005      	movs	r0, #5
 800043a:	f000 fc23 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>
	// On F401 Black pill blue led is connected to PC13

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <HAL_UART_MspInit>:



void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//Enable the clock for uart and GPIO pins
	__HAL_RCC_USART3_CLK_ENABLE();
 800044c:	4b1e      	ldr	r3, [pc, #120]	@ (80004c8 <HAL_UART_MspInit+0x84>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	4a1d      	ldr	r2, [pc, #116]	@ (80004c8 <HAL_UART_MspInit+0x84>)
 8000452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000456:	61d3      	str	r3, [r2, #28]
 8000458:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <HAL_UART_MspInit+0x84>)
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <HAL_UART_MspInit+0x84>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a17      	ldr	r2, [pc, #92]	@ (80004c8 <HAL_UART_MspInit+0x84>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b15      	ldr	r3, [pc, #84]	@ (80004c8 <HAL_UART_MspInit+0x84>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]

	memset(&gpio_uart,0,sizeof(gpio_uart)); //there might be garbage values
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	2210      	movs	r2, #16
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f001 fc31 	bl	8001cec <memset>
	//Do the pin mux configurations
	gpio_uart.Pin = GPIO_PIN_10; //USART3 TX
 800048a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800048e:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000490:	2302      	movs	r3, #2
 8000492:	617b      	str	r3, [r7, #20]
	gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8000494:	2303      	movs	r3, #3
 8000496:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOB, &gpio_uart);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	480b      	ldr	r0, [pc, #44]	@ (80004cc <HAL_UART_MspInit+0x88>)
 80004a0:	f000 fc4c 	bl	8000d3c <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_11; //USART3 RX
 80004a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004a8:	613b      	str	r3, [r7, #16]
	gpio_uart.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
	gpio_uart.Pull =  GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &gpio_uart);
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	@ (80004cc <HAL_UART_MspInit+0x88>)
 80004ba:	f000 fc3f 	bl	8000d3c <HAL_GPIO_Init>


}
 80004be:	bf00      	nop
 80004c0:	3720      	adds	r7, #32
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010c00 	.word	0x40010c00

080004d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_can;
	__HAL_RCC_CAN1_CLK_ENABLE();
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <HAL_CAN_MspInit+0x84>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000554 <HAL_CAN_MspInit+0x84>)
 80004de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e2:	61d3      	str	r3, [r2, #28]
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <HAL_CAN_MspInit+0x84>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <HAL_CAN_MspInit+0x84>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a17      	ldr	r2, [pc, #92]	@ (8000554 <HAL_CAN_MspInit+0x84>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <HAL_CAN_MspInit+0x84>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]

	memset(&gpio_can,0,sizeof(gpio_can)); //there might be garbage values
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2210      	movs	r2, #16
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f001 fbeb 	bl	8001cec <memset>
	//Do the pin mux configurations
	gpio_can.Pin = GPIO_PIN_12; //CAN TX
 8000516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800051a:	613b      	str	r3, [r7, #16]
	gpio_can.Mode = GPIO_MODE_AF_PP;
 800051c:	2302      	movs	r3, #2
 800051e:	617b      	str	r3, [r7, #20]
	gpio_can.Speed = GPIO_SPEED_FREQ_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOA, &gpio_can);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	480b      	ldr	r0, [pc, #44]	@ (8000558 <HAL_CAN_MspInit+0x88>)
 800052c:	f000 fc06 	bl	8000d3c <HAL_GPIO_Init>

	gpio_can.Pin = GPIO_PIN_11; //CAN RX
 8000530:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000534:	613b      	str	r3, [r7, #16]
	gpio_can.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
	gpio_can.Pull =  GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &gpio_can);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4804      	ldr	r0, [pc, #16]	@ (8000558 <HAL_CAN_MspInit+0x88>)
 8000546:	f000 fbf9 	bl	8000d3c <HAL_GPIO_Init>

}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	40010800 	.word	0x40010800

0800055c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000568:	f7ff fff8 	bl	800055c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480b      	ldr	r0, [pc, #44]	@ (800059c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800056e:	490c      	ldr	r1, [pc, #48]	@ (80005a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000570:	4a0c      	ldr	r2, [pc, #48]	@ (80005a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a09      	ldr	r2, [pc, #36]	@ (80005a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000584:	4c09      	ldr	r4, [pc, #36]	@ (80005ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000592:	f001 fbb3 	bl	8001cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff fde9 	bl	800016c <main>
  bx lr
 800059a:	4770      	bx	lr
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005a4:	080026d8 	.word	0x080026d8
  ldr r2, =_sbss
 80005a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005ac:	2000029c 	.word	0x2000029c

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>
	...

080005b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <HAL_Init+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <HAL_Init+0x28>)
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 fb5d 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	200f      	movs	r0, #15
 80005cc:	f000 f808 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d0:	f7ff ff30 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40022000 	.word	0x40022000

080005e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <HAL_InitTick+0x54>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <HAL_InitTick+0x58>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fb67 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	e00e      	b.n	800062c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d80a      	bhi.n	800062a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	2200      	movs	r2, #0
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f000 fb3d 	bl	8000c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4a06      	ldr	r2, [pc, #24]	@ (800063c <HAL_InitTick+0x5c>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	20000008 	.word	0x20000008
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_IncTick+0x1c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_IncTick+0x20>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a03      	ldr	r2, [pc, #12]	@ (8000660 <HAL_IncTick+0x20>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000008 	.word	0x20000008
 8000660:	2000014c 	.word	0x2000014c

08000664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b02      	ldr	r3, [pc, #8]	@ (8000674 <HAL_GetTick+0x10>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	2000014c 	.word	0x2000014c

08000678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000680:	f7ff fff0 	bl	8000664 <HAL_GetTick>
 8000684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000690:	d005      	beq.n	800069e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <HAL_Delay+0x44>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4413      	add	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800069e:	bf00      	nop
 80006a0:	f7ff ffe0 	bl	8000664 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d8f7      	bhi.n	80006a0 <HAL_Delay+0x28>
  {
  }
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000008 	.word	0x20000008

080006c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e0ed      	b.n	80008ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d102      	bne.n	80006e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff fef6 	bl	80004d0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f042 0201 	orr.w	r2, r2, #1
 80006f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006f4:	f7ff ffb6 	bl	8000664 <HAL_GetTick>
 80006f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006fa:	e012      	b.n	8000722 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006fc:	f7ff ffb2 	bl	8000664 <HAL_GetTick>
 8000700:	4602      	mov	r2, r0
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	2b0a      	cmp	r3, #10
 8000708:	d90b      	bls.n	8000722 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2205      	movs	r2, #5
 800071a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e0c5      	b.n	80008ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0e5      	beq.n	80006fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f022 0202 	bic.w	r2, r2, #2
 800073e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000740:	f7ff ff90 	bl	8000664 <HAL_GetTick>
 8000744:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000746:	e012      	b.n	800076e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000748:	f7ff ff8c 	bl	8000664 <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d90b      	bls.n	800076e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800075a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2205      	movs	r2, #5
 8000766:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e09f      	b.n	80008ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f003 0302 	and.w	r3, r3, #2
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1e5      	bne.n	8000748 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7e1b      	ldrb	r3, [r3, #24]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d108      	bne.n	8000796 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	e007      	b.n	80007a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7e5b      	ldrb	r3, [r3, #25]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d108      	bne.n	80007c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	e007      	b.n	80007d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80007ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7e9b      	ldrb	r3, [r3, #26]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d108      	bne.n	80007ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f042 0220 	orr.w	r2, r2, #32
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	e007      	b.n	80007fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f022 0220 	bic.w	r2, r2, #32
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7edb      	ldrb	r3, [r3, #27]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d108      	bne.n	8000814 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f022 0210 	bic.w	r2, r2, #16
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	e007      	b.n	8000824 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f042 0210 	orr.w	r2, r2, #16
 8000822:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7f1b      	ldrb	r3, [r3, #28]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d108      	bne.n	800083e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f042 0208 	orr.w	r2, r2, #8
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	e007      	b.n	800084e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f022 0208 	bic.w	r2, r2, #8
 800084c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	7f5b      	ldrb	r3, [r3, #29]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d108      	bne.n	8000868 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f042 0204 	orr.w	r2, r2, #4
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e007      	b.n	8000878 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f022 0204 	bic.w	r2, r2, #4
 8000876:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	431a      	orrs	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	431a      	orrs	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	ea42 0103 	orr.w	r1, r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	430a      	orrs	r2, r1
 800089c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2201      	movs	r2, #1
 80008a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d12e      	bne.n	8000928 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2202      	movs	r2, #2
 80008ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f022 0201 	bic.w	r2, r2, #1
 80008e0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80008e2:	f7ff febf 	bl	8000664 <HAL_GetTick>
 80008e6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80008e8:	e012      	b.n	8000910 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008ea:	f7ff febb 	bl	8000664 <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	2b0a      	cmp	r3, #10
 80008f6:	d90b      	bls.n	8000910 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2205      	movs	r2, #5
 8000908:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e012      	b.n	8000936 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1e5      	bne.n	80008ea <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	e006      	b.n	8000936 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800092c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
  }
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_CAN_AddTxMessage>:
.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800093e:	b480      	push	{r7}
 8000940:	b089      	sub	sp, #36	@ 0x24
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000952:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800095c:	7ffb      	ldrb	r3, [r7, #31]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d003      	beq.n	800096a <HAL_CAN_AddTxMessage+0x2c>
 8000962:	7ffb      	ldrb	r3, [r7, #31]
 8000964:	2b02      	cmp	r3, #2
 8000966:	f040 80ad 	bne.w	8000ac4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d10a      	bne.n	800098a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800097a:	2b00      	cmp	r3, #0
 800097c:	d105      	bne.n	800098a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 8095 	beq.w	8000ab4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	0e1b      	lsrs	r3, r3, #24
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000994:	2201      	movs	r2, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	409a      	lsls	r2, r3
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10d      	bne.n	80009c2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80009b0:	68f9      	ldr	r1, [r7, #12]
 80009b2:	6809      	ldr	r1, [r1, #0]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3318      	adds	r3, #24
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	440b      	add	r3, r1
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	e00f      	b.n	80009e2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009d2:	68f9      	ldr	r1, [r7, #12]
 80009d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80009d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	3318      	adds	r3, #24
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	440b      	add	r3, r1
 80009e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6819      	ldr	r1, [r3, #0]
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	691a      	ldr	r2, [r3, #16]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3318      	adds	r3, #24
 80009ee:	011b      	lsls	r3, r3, #4
 80009f0:	440b      	add	r3, r1
 80009f2:	3304      	adds	r3, #4
 80009f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	7d1b      	ldrb	r3, [r3, #20]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d111      	bne.n	8000a22 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3318      	adds	r3, #24
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	4413      	add	r3, r2
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	6811      	ldr	r1, [r2, #0]
 8000a12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3318      	adds	r3, #24
 8000a1a:	011b      	lsls	r3, r3, #4
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3304      	adds	r3, #4
 8000a20:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3307      	adds	r3, #7
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	061a      	lsls	r2, r3, #24
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3306      	adds	r3, #6
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	041b      	lsls	r3, r3, #16
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3305      	adds	r3, #5
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	3204      	adds	r2, #4
 8000a42:	7812      	ldrb	r2, [r2, #0]
 8000a44:	4610      	mov	r0, r2
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	6811      	ldr	r1, [r2, #0]
 8000a4a:	ea43 0200 	orr.w	r2, r3, r0
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	011b      	lsls	r3, r3, #4
 8000a52:	440b      	add	r3, r1
 8000a54:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000a58:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3303      	adds	r3, #3
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	061a      	lsls	r2, r3, #24
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3302      	adds	r3, #2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	041b      	lsls	r3, r3, #16
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	4313      	orrs	r3, r2
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	6811      	ldr	r1, [r2, #0]
 8000a80:	ea43 0200 	orr.w	r2, r3, r0
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	440b      	add	r3, r1
 8000a8a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000a8e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3318      	adds	r3, #24
 8000a98:	011b      	lsls	r3, r3, #4
 8000a9a:	4413      	add	r3, r2
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	6811      	ldr	r1, [r2, #0]
 8000aa2:	f043 0201 	orr.w	r2, r3, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3318      	adds	r3, #24
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	440b      	add	r3, r1
 8000aae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	e00e      	b.n	8000ad2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e006      	b.n	8000ad2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
  }
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	@ 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000af2:	7afb      	ldrb	r3, [r7, #11]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d002      	beq.n	8000afe <HAL_CAN_IsTxMessagePending+0x22>
 8000af8:	7afb      	ldrb	r3, [r7, #11]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d10b      	bne.n	8000b16 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	069b      	lsls	r3, r3, #26
 8000b08:	401a      	ands	r2, r3
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	069b      	lsls	r3, r3, #26
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d001      	beq.n	8000b16 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000b12:	2301      	movs	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
	...

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	db0a      	blt.n	8000bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	490c      	ldr	r1, [pc, #48]	@ (8000bd4 <__NVIC_SetPriority+0x4c>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	0112      	lsls	r2, r2, #4
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	440b      	add	r3, r1
 8000bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb0:	e00a      	b.n	8000bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4908      	ldr	r1, [pc, #32]	@ (8000bd8 <__NVIC_SetPriority+0x50>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	761a      	strb	r2, [r3, #24]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b089      	sub	sp, #36	@ 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f1c3 0307 	rsb	r3, r3, #7
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	bf28      	it	cs
 8000bfa:	2304      	movcs	r3, #4
 8000bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3304      	adds	r3, #4
 8000c02:	2b06      	cmp	r3, #6
 8000c04:	d902      	bls.n	8000c0c <NVIC_EncodePriority+0x30>
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3b03      	subs	r3, #3
 8000c0a:	e000      	b.n	8000c0e <NVIC_EncodePriority+0x32>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	f04f 32ff 	mov.w	r2, #4294967295
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c24:	f04f 31ff 	mov.w	r1, #4294967295
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2e:	43d9      	mvns	r1, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	4313      	orrs	r3, r2
         );
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3724      	adds	r7, #36	@ 0x24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c50:	d301      	bcc.n	8000c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00f      	b.n	8000c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <SysTick_Config+0x40>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295
 8000c64:	f7ff ff90 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <SysTick_Config+0x40>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <SysTick_Config+0x40>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff49 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff5e 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff90 	bl	8000bdc <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff5f 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffb0 	bl	8000c40 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d106      	bne.n	8000d08 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a08      	ldr	r2, [pc, #32]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d06:	e005      	b.n	8000d14 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d08:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d0e:	f023 0304 	bic.w	r3, r3, #4
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d28:	f000 f802 	bl	8000d30 <HAL_SYSTICK_Callback>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b08b      	sub	sp, #44	@ 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e169      	b.n	8001024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d50:	2201      	movs	r2, #1
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 8158 	bne.w	800101e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a9a      	ldr	r2, [pc, #616]	@ (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d05e      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d78:	4a98      	ldr	r2, [pc, #608]	@ (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d875      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d7e:	4a98      	ldr	r2, [pc, #608]	@ (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d058      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d84:	4a96      	ldr	r2, [pc, #600]	@ (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d86f      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d8a:	4a96      	ldr	r2, [pc, #600]	@ (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d052      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d90:	4a94      	ldr	r2, [pc, #592]	@ (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d869      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d96:	4a94      	ldr	r2, [pc, #592]	@ (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d04c      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d9c:	4a92      	ldr	r2, [pc, #584]	@ (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d863      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000da2:	4a92      	ldr	r2, [pc, #584]	@ (8000fec <HAL_GPIO_Init+0x2b0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d046      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000da8:	4a90      	ldr	r2, [pc, #576]	@ (8000fec <HAL_GPIO_Init+0x2b0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d85d      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d82a      	bhi.n	8000e08 <HAL_GPIO_Init+0xcc>
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d859      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000db6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dbc <HAL_GPIO_Init+0x80>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e11 	.word	0x08000e11
 8000dc4:	08000e23 	.word	0x08000e23
 8000dc8:	08000e65 	.word	0x08000e65
 8000dcc:	08000e6b 	.word	0x08000e6b
 8000dd0:	08000e6b 	.word	0x08000e6b
 8000dd4:	08000e6b 	.word	0x08000e6b
 8000dd8:	08000e6b 	.word	0x08000e6b
 8000ddc:	08000e6b 	.word	0x08000e6b
 8000de0:	08000e6b 	.word	0x08000e6b
 8000de4:	08000e6b 	.word	0x08000e6b
 8000de8:	08000e6b 	.word	0x08000e6b
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000e6b 	.word	0x08000e6b
 8000df4:	08000e6b 	.word	0x08000e6b
 8000df8:	08000e6b 	.word	0x08000e6b
 8000dfc:	08000e6b 	.word	0x08000e6b
 8000e00:	08000e19 	.word	0x08000e19
 8000e04:	08000e2d 	.word	0x08000e2d
 8000e08:	4a79      	ldr	r2, [pc, #484]	@ (8000ff0 <HAL_GPIO_Init+0x2b4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0e:	e02c      	b.n	8000e6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	623b      	str	r3, [r7, #32]
          break;
 8000e16:	e029      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	e024      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	3308      	adds	r3, #8
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e01f      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	330c      	adds	r3, #12
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e01a      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	623b      	str	r3, [r7, #32]
          break;
 8000e42:	e013      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d105      	bne.n	8000e58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	611a      	str	r2, [r3, #16]
          break;
 8000e56:	e009      	b.n	8000e6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	615a      	str	r2, [r3, #20]
          break;
 8000e62:	e003      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          break;
 8000e6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2bff      	cmp	r3, #255	@ 0xff
 8000e70:	d801      	bhi.n	8000e76 <HAL_GPIO_Init+0x13a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	e001      	b.n	8000e7a <HAL_GPIO_Init+0x13e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2bff      	cmp	r3, #255	@ 0xff
 8000e80:	d802      	bhi.n	8000e88 <HAL_GPIO_Init+0x14c>
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x152>
 8000e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	210f      	movs	r1, #15
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	6a39      	ldr	r1, [r7, #32]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 80b1 	beq.w	800101e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed4:	4a48      	ldr	r2, [pc, #288]	@ (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a40      	ldr	r2, [pc, #256]	@ (8000ffc <HAL_GPIO_Init+0x2c0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d013      	beq.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3f      	ldr	r2, [pc, #252]	@ (8001000 <HAL_GPIO_Init+0x2c4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d00d      	beq.n	8000f24 <HAL_GPIO_Init+0x1e8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8001004 <HAL_GPIO_Init+0x2c8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d007      	beq.n	8000f20 <HAL_GPIO_Init+0x1e4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3d      	ldr	r2, [pc, #244]	@ (8001008 <HAL_GPIO_Init+0x2cc>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d101      	bne.n	8000f1c <HAL_GPIO_Init+0x1e0>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e004      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f2c:	f002 0203 	and.w	r2, r2, #3
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	4093      	lsls	r3, r2
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f3a:	492f      	ldr	r1, [pc, #188]	@ (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f54:	4b2d      	ldr	r3, [pc, #180]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	492c      	ldr	r1, [pc, #176]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f62:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4928      	ldr	r1, [pc, #160]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7c:	4b23      	ldr	r3, [pc, #140]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	4922      	ldr	r1, [pc, #136]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60cb      	str	r3, [r1, #12]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8a:	4b20      	ldr	r3, [pc, #128]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	491e      	ldr	r1, [pc, #120]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa4:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4918      	ldr	r1, [pc, #96]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb2:	4b16      	ldr	r3, [pc, #88]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4914      	ldr	r1, [pc, #80]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d021      	beq.n	8001010 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	490e      	ldr	r1, [pc, #56]	@ (800100c <HAL_GPIO_Init+0x2d0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	e021      	b.n	800101e <HAL_GPIO_Init+0x2e2>
 8000fda:	bf00      	nop
 8000fdc:	10320000 	.word	0x10320000
 8000fe0:	10310000 	.word	0x10310000
 8000fe4:	10220000 	.word	0x10220000
 8000fe8:	10210000 	.word	0x10210000
 8000fec:	10120000 	.word	0x10120000
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40011000 	.word	0x40011000
 8001008:	40011400 	.word	0x40011400
 800100c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001010:	4b0b      	ldr	r3, [pc, #44]	@ (8001040 <HAL_GPIO_Init+0x304>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	43db      	mvns	r3, r3
 8001018:	4909      	ldr	r1, [pc, #36]	@ (8001040 <HAL_GPIO_Init+0x304>)
 800101a:	4013      	ands	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	3301      	adds	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102a:	fa22 f303 	lsr.w	r3, r2, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	f47f ae8e 	bne.w	8000d50 <HAL_GPIO_Init+0x14>
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	372c      	adds	r7, #44	@ 0x2c
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e272      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8087 	beq.w	8001172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001064:	4b92      	ldr	r3, [pc, #584]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b04      	cmp	r3, #4
 800106e:	d00c      	beq.n	800108a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001070:	4b8f      	ldr	r3, [pc, #572]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b08      	cmp	r3, #8
 800107a:	d112      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
 800107c:	4b8c      	ldr	r3, [pc, #560]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001088:	d10b      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108a:	4b89      	ldr	r3, [pc, #548]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d06c      	beq.n	8001170 <HAL_RCC_OscConfig+0x12c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d168      	bne.n	8001170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e24c      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x76>
 80010ac:	4b80      	ldr	r3, [pc, #512]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a7f      	ldr	r2, [pc, #508]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e02e      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x98>
 80010c2:	4b7b      	ldr	r3, [pc, #492]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a7a      	ldr	r2, [pc, #488]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b78      	ldr	r3, [pc, #480]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a77      	ldr	r2, [pc, #476]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e01d      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0xbc>
 80010e6:	4b72      	ldr	r3, [pc, #456]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a71      	ldr	r2, [pc, #452]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b6f      	ldr	r3, [pc, #444]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6e      	ldr	r2, [pc, #440]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 8001100:	4b6b      	ldr	r3, [pc, #428]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a6a      	ldr	r2, [pc, #424]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b68      	ldr	r3, [pc, #416]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a67      	ldr	r2, [pc, #412]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001116:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff faa0 	bl	8000664 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fa9c 	bl	8000664 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	@ 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e200      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b5d      	ldr	r3, [pc, #372]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xe4>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fa8c 	bl	8000664 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fa88 	bl	8000664 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	@ 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e1ec      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	4b53      	ldr	r3, [pc, #332]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x10c>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d063      	beq.n	8001246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800117e:	4b4c      	ldr	r3, [pc, #304]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800118a:	4b49      	ldr	r3, [pc, #292]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b08      	cmp	r3, #8
 8001194:	d11c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x18c>
 8001196:	4b46      	ldr	r3, [pc, #280]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d116      	bne.n	80011d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	4b43      	ldr	r3, [pc, #268]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x176>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e1c0      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b3d      	ldr	r3, [pc, #244]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4939      	ldr	r1, [pc, #228]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	e03a      	b.n	8001246 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d8:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <HAL_RCC_OscConfig+0x270>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fa41 	bl	8000664 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fa3d 	bl	8000664 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1a1      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4927      	ldr	r1, [pc, #156]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e015      	b.n	8001246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	4b26      	ldr	r3, [pc, #152]	@ (80012b4 <HAL_RCC_OscConfig+0x270>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fa20 	bl	8000664 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fa1c 	bl	8000664 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e180      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d03a      	beq.n	80012c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d019      	beq.n	800128e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_RCC_OscConfig+0x274>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001260:	f7ff fa00 	bl	8000664 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff f9fc 	bl	8000664 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e160      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001286:	2001      	movs	r0, #1
 8001288:	f000 face 	bl	8001828 <RCC_Delay>
 800128c:	e01c      	b.n	80012c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_RCC_OscConfig+0x274>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001294:	f7ff f9e6 	bl	8000664 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129a:	e00f      	b.n	80012bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff f9e2 	bl	8000664 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d908      	bls.n	80012bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e146      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	42420000 	.word	0x42420000
 80012b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b92      	ldr	r3, [pc, #584]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e9      	bne.n	800129c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80a6 	beq.w	8001422 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b8b      	ldr	r3, [pc, #556]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10d      	bne.n	8001302 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b88      	ldr	r3, [pc, #544]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a87      	ldr	r2, [pc, #540]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b85      	ldr	r3, [pc, #532]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b82      	ldr	r3, [pc, #520]	@ (800150c <HAL_RCC_OscConfig+0x4c8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d118      	bne.n	8001340 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b7f      	ldr	r3, [pc, #508]	@ (800150c <HAL_RCC_OscConfig+0x4c8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a7e      	ldr	r2, [pc, #504]	@ (800150c <HAL_RCC_OscConfig+0x4c8>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff f9a3 	bl	8000664 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001322:	f7ff f99f 	bl	8000664 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b64      	cmp	r3, #100	@ 0x64
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e103      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	4b75      	ldr	r3, [pc, #468]	@ (800150c <HAL_RCC_OscConfig+0x4c8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x312>
 8001348:	4b6f      	ldr	r3, [pc, #444]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4a6e      	ldr	r2, [pc, #440]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6213      	str	r3, [r2, #32]
 8001354:	e02d      	b.n	80013b2 <HAL_RCC_OscConfig+0x36e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x334>
 800135e:	4b6a      	ldr	r3, [pc, #424]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a69      	ldr	r2, [pc, #420]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	4b67      	ldr	r3, [pc, #412]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a66      	ldr	r2, [pc, #408]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	e01c      	b.n	80013b2 <HAL_RCC_OscConfig+0x36e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b05      	cmp	r3, #5
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x356>
 8001380:	4b61      	ldr	r3, [pc, #388]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a60      	ldr	r2, [pc, #384]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6213      	str	r3, [r2, #32]
 800138c:	4b5e      	ldr	r3, [pc, #376]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a5d      	ldr	r2, [pc, #372]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	e00b      	b.n	80013b2 <HAL_RCC_OscConfig+0x36e>
 800139a:	4b5b      	ldr	r3, [pc, #364]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a5a      	ldr	r2, [pc, #360]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	4b58      	ldr	r3, [pc, #352]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a57      	ldr	r2, [pc, #348]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d015      	beq.n	80013e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff f953 	bl	8000664 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff f94f 	bl	8000664 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0b1      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ee      	beq.n	80013c2 <HAL_RCC_OscConfig+0x37e>
 80013e4:	e014      	b.n	8001410 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff f93d 	bl	8000664 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff f939 	bl	8000664 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e09b      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	4b40      	ldr	r3, [pc, #256]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ee      	bne.n	80013ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d105      	bne.n	8001422 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001416:	4b3c      	ldr	r3, [pc, #240]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a3b      	ldr	r2, [pc, #236]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8087 	beq.w	800153a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800142c:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	d061      	beq.n	80014fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d146      	bne.n	80014ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001440:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <HAL_RCC_OscConfig+0x4cc>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff f90d 	bl	8000664 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff f909 	bl	8000664 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e06d      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001474:	d108      	bne.n	8001488 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001476:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4921      	ldr	r1, [pc, #132]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a19      	ldr	r1, [r3, #32]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001498:	430b      	orrs	r3, r1
 800149a:	491b      	ldr	r1, [pc, #108]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x4cc>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff f8dd 	bl	8000664 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff f8d9 	bl	8000664 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e03d      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x46a>
 80014cc:	e035      	b.n	800153a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_RCC_OscConfig+0x4cc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff f8c6 	bl	8000664 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff f8c2 	bl	8000664 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e026      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x498>
 80014fa:	e01e      	b.n	800153a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e019      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
 8001508:	40021000 	.word	0x40021000
 800150c:	40007000 	.word	0x40007000
 8001510:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_RCC_OscConfig+0x500>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	429a      	cmp	r2, r3
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0d0      	b.n	80016fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800155c:	4b6a      	ldr	r3, [pc, #424]	@ (8001708 <HAL_RCC_ClockConfig+0x1c0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d910      	bls.n	800158c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	4b67      	ldr	r3, [pc, #412]	@ (8001708 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 0207 	bic.w	r2, r3, #7
 8001572:	4965      	ldr	r1, [pc, #404]	@ (8001708 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b63      	ldr	r3, [pc, #396]	@ (8001708 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0b8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a4:	4b59      	ldr	r3, [pc, #356]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a58      	ldr	r2, [pc, #352]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	4b53      	ldr	r3, [pc, #332]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a52      	ldr	r2, [pc, #328]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80015c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	4b50      	ldr	r3, [pc, #320]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	494d      	ldr	r1, [pc, #308]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d040      	beq.n	8001668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b47      	ldr	r3, [pc, #284]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d115      	bne.n	8001626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001606:	4b41      	ldr	r3, [pc, #260]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e073      	b.n	80016fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06b      	b.n	80016fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001626:	4b39      	ldr	r3, [pc, #228]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f023 0203 	bic.w	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	4936      	ldr	r1, [pc, #216]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001638:	f7ff f814 	bl	8000664 <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	e00a      	b.n	8001656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001640:	f7ff f810 	bl	8000664 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e053      	b.n	80016fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 020c 	and.w	r2, r3, #12
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	429a      	cmp	r2, r3
 8001666:	d1eb      	bne.n	8001640 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001668:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <HAL_RCC_ClockConfig+0x1c0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d210      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 0207 	bic.w	r2, r3, #7
 800167e:	4922      	ldr	r1, [pc, #136]	@ (8001708 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e032      	b.n	80016fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4916      	ldr	r1, [pc, #88]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c2:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	490e      	ldr	r1, [pc, #56]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016d6:	f000 f821 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	490a      	ldr	r1, [pc, #40]	@ (8001710 <HAL_RCC_ClockConfig+0x1c8>)
 80016e8:	5ccb      	ldrb	r3, [r1, r3]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a09      	ldr	r2, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1cc>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016f2:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_RCC_ClockConfig+0x1d0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff72 	bl	80005e0 <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000
 800170c:	40021000 	.word	0x40021000
 8001710:	08002668 	.word	0x08002668
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001736:	4b1e      	ldr	r3, [pc, #120]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b04      	cmp	r3, #4
 8001744:	d002      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x30>
 8001746:	2b08      	cmp	r3, #8
 8001748:	d003      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x36>
 800174a:	e027      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800174e:	613b      	str	r3, [r7, #16]
      break;
 8001750:	e027      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	0c9b      	lsrs	r3, r3, #18
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800175c:	5cd3      	ldrb	r3, [r2, r3]
 800175e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d010      	beq.n	800178c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	0c5b      	lsrs	r3, r3, #17
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	4a11      	ldr	r2, [pc, #68]	@ (80017bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800177e:	fb03 f202 	mul.w	r2, r3, r2
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e004      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a0c      	ldr	r2, [pc, #48]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	613b      	str	r3, [r7, #16]
      break;
 800179a:	e002      	b.n	80017a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800179e:	613b      	str	r3, [r7, #16]
      break;
 80017a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017a2:	693b      	ldr	r3, [r7, #16]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	371c      	adds	r7, #28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	007a1200 	.word	0x007a1200
 80017b8:	08002680 	.word	0x08002680
 80017bc:	08002690 	.word	0x08002690
 80017c0:	003d0900 	.word	0x003d0900

080017c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c8:	4b02      	ldr	r3, [pc, #8]	@ (80017d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	20000000 	.word	0x20000000

080017d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017dc:	f7ff fff2 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 80017e0:	4602      	mov	r2, r0
 80017e2:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	4903      	ldr	r1, [pc, #12]	@ (80017fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ee:	5ccb      	ldrb	r3, [r1, r3]
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40021000 	.word	0x40021000
 80017fc:	08002678 	.word	0x08002678

08001800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001804:	f7ff ffde 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0adb      	lsrs	r3, r3, #11
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	4903      	ldr	r1, [pc, #12]	@ (8001824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	08002678 	.word	0x08002678

08001828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <RCC_Delay+0x34>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	@ (8001860 <RCC_Delay+0x38>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001844:	bf00      	nop
  }
  while (Delay --);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	60fa      	str	r2, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <RCC_Delay+0x1c>
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000000 	.word	0x20000000
 8001860:	10624dd3 	.word	0x10624dd3

08001864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e042      	b.n	80018fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe fdda 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2224      	movs	r2, #36	@ 0x24
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80018a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f971 	bl	8001b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80018bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80018cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68da      	ldr	r2, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80018dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2220      	movs	r2, #32
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b20      	cmp	r3, #32
 8001922:	d175      	bne.n	8001a10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_UART_Transmit+0x2c>
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e06e      	b.n	8001a12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2221      	movs	r2, #33	@ 0x21
 800193e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001942:	f7fe fe8f 	bl	8000664 <HAL_GetTick>
 8001946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	88fa      	ldrh	r2, [r7, #6]
 800194c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	88fa      	ldrh	r2, [r7, #6]
 8001952:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800195c:	d108      	bne.n	8001970 <HAL_UART_Transmit+0x6c>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d104      	bne.n	8001970 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	e003      	b.n	8001978 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001978:	e02e      	b.n	80019d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2200      	movs	r2, #0
 8001982:	2180      	movs	r1, #128	@ 0x80
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f848 	bl	8001a1a <UART_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e03a      	b.n	8001a12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10b      	bne.n	80019ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	3302      	adds	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	e007      	b.n	80019ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	3301      	adds	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1cb      	bne.n	800197a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2200      	movs	r2, #0
 80019ea:	2140      	movs	r1, #64	@ 0x40
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 f814 	bl	8001a1a <UART_WaitOnFlagUntilTimeout>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e006      	b.n	8001a12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e000      	b.n	8001a12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001a10:	2302      	movs	r3, #2
  }
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4613      	mov	r3, r2
 8001a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a2a:	e03b      	b.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a32:	d037      	beq.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a34:	f7fe fe16 	bl	8000664 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	6a3a      	ldr	r2, [r7, #32]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d302      	bcc.n	8001a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e03a      	b.n	8001ac4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d023      	beq.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b80      	cmp	r3, #128	@ 0x80
 8001a60:	d020      	beq.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b40      	cmp	r3, #64	@ 0x40
 8001a66:	d01d      	beq.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d116      	bne.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f81d 	bl	8001acc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2208      	movs	r2, #8
 8001a96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e00f      	b.n	8001ac4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4013      	ands	r3, r2
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	bf0c      	ite	eq
 8001ab4:	2301      	moveq	r3, #1
 8001ab6:	2300      	movne	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d0b4      	beq.n	8001a2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b095      	sub	sp, #84	@ 0x54
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	330c      	adds	r3, #12
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ade:	e853 3f00 	ldrex	r3, [r3]
 8001ae2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	330c      	adds	r3, #12
 8001af2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001af4:	643a      	str	r2, [r7, #64]	@ 0x40
 8001af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001af8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001afa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001afc:	e841 2300 	strex	r3, r2, [r1]
 8001b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e5      	bne.n	8001ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3314      	adds	r3, #20
 8001b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	e853 3f00 	ldrex	r3, [r3]
 8001b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f023 0301 	bic.w	r3, r3, #1
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3314      	adds	r3, #20
 8001b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b30:	e841 2300 	strex	r3, r2, [r1]
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e5      	bne.n	8001b08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d119      	bne.n	8001b78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	330c      	adds	r3, #12
 8001b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	e853 3f00 	ldrex	r3, [r3]
 8001b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f023 0310 	bic.w	r3, r3, #16
 8001b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	330c      	adds	r3, #12
 8001b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b64:	61ba      	str	r2, [r7, #24]
 8001b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b68:	6979      	ldr	r1, [r7, #20]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	e841 2300 	strex	r3, r2, [r1]
 8001b70:	613b      	str	r3, [r7, #16]
   return(result);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e5      	bne.n	8001b44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001b86:	bf00      	nop
 8001b88:	3754      	adds	r7, #84	@ 0x54
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001bca:	f023 030c 	bic.w	r3, r3, #12
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca4 <UART_SetConfig+0x114>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d103      	bne.n	8001c00 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bf8:	f7ff fe02 	bl	8001800 <HAL_RCC_GetPCLK2Freq>
 8001bfc:	60f8      	str	r0, [r7, #12]
 8001bfe:	e002      	b.n	8001c06 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c00:	f7ff fdea 	bl	80017d8 <HAL_RCC_GetPCLK1Freq>
 8001c04:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009a      	lsls	r2, r3, #2
 8001c10:	441a      	add	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	0119      	lsls	r1, r3, #4
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009a      	lsls	r2, r3, #2
 8001c30:	441a      	add	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c3e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2064      	movs	r0, #100	@ 0x64
 8001c46:	fb00 f303 	mul.w	r3, r0, r3
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	3332      	adds	r3, #50	@ 0x32
 8001c50:	4a15      	ldr	r2, [pc, #84]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c5c:	4419      	add	r1, r3
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009a      	lsls	r2, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c76:	fba3 0302 	umull	r0, r3, r3, r2
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	fb00 f303 	mul.w	r3, r0, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	3332      	adds	r3, #50	@ 0x32
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <UART_SetConfig+0x118>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	f003 020f 	and.w	r2, r3, #15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	440a      	add	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	51eb851f 	.word	0x51eb851f

08001cac <siprintf>:
 8001cac:	b40e      	push	{r1, r2, r3}
 8001cae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001cb2:	b500      	push	{lr}
 8001cb4:	b09c      	sub	sp, #112	@ 0x70
 8001cb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8001cb8:	9002      	str	r0, [sp, #8]
 8001cba:	9006      	str	r0, [sp, #24]
 8001cbc:	9107      	str	r1, [sp, #28]
 8001cbe:	9104      	str	r1, [sp, #16]
 8001cc0:	4808      	ldr	r0, [pc, #32]	@ (8001ce4 <siprintf+0x38>)
 8001cc2:	4909      	ldr	r1, [pc, #36]	@ (8001ce8 <siprintf+0x3c>)
 8001cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001cc8:	9105      	str	r1, [sp, #20]
 8001cca:	6800      	ldr	r0, [r0, #0]
 8001ccc:	a902      	add	r1, sp, #8
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	f000 f98c 	bl	8001fec <_svfiprintf_r>
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	9b02      	ldr	r3, [sp, #8]
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	b01c      	add	sp, #112	@ 0x70
 8001cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ce0:	b003      	add	sp, #12
 8001ce2:	4770      	bx	lr
 8001ce4:	2000000c 	.word	0x2000000c
 8001ce8:	ffff0208 	.word	0xffff0208

08001cec <memset>:
 8001cec:	4603      	mov	r3, r0
 8001cee:	4402      	add	r2, r0
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <memset+0xa>
 8001cf4:	4770      	bx	lr
 8001cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cfa:	e7f9      	b.n	8001cf0 <memset+0x4>

08001cfc <__libc_init_array>:
 8001cfc:	b570      	push	{r4, r5, r6, lr}
 8001cfe:	2600      	movs	r6, #0
 8001d00:	4d0c      	ldr	r5, [pc, #48]	@ (8001d34 <__libc_init_array+0x38>)
 8001d02:	4c0d      	ldr	r4, [pc, #52]	@ (8001d38 <__libc_init_array+0x3c>)
 8001d04:	1b64      	subs	r4, r4, r5
 8001d06:	10a4      	asrs	r4, r4, #2
 8001d08:	42a6      	cmp	r6, r4
 8001d0a:	d109      	bne.n	8001d20 <__libc_init_array+0x24>
 8001d0c:	f000 fc86 	bl	800261c <_init>
 8001d10:	2600      	movs	r6, #0
 8001d12:	4d0a      	ldr	r5, [pc, #40]	@ (8001d3c <__libc_init_array+0x40>)
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <__libc_init_array+0x44>)
 8001d16:	1b64      	subs	r4, r4, r5
 8001d18:	10a4      	asrs	r4, r4, #2
 8001d1a:	42a6      	cmp	r6, r4
 8001d1c:	d105      	bne.n	8001d2a <__libc_init_array+0x2e>
 8001d1e:	bd70      	pop	{r4, r5, r6, pc}
 8001d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d24:	4798      	blx	r3
 8001d26:	3601      	adds	r6, #1
 8001d28:	e7ee      	b.n	8001d08 <__libc_init_array+0xc>
 8001d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d2e:	4798      	blx	r3
 8001d30:	3601      	adds	r6, #1
 8001d32:	e7f2      	b.n	8001d1a <__libc_init_array+0x1e>
 8001d34:	080026d0 	.word	0x080026d0
 8001d38:	080026d0 	.word	0x080026d0
 8001d3c:	080026d0 	.word	0x080026d0
 8001d40:	080026d4 	.word	0x080026d4

08001d44 <__retarget_lock_acquire_recursive>:
 8001d44:	4770      	bx	lr

08001d46 <__retarget_lock_release_recursive>:
 8001d46:	4770      	bx	lr

08001d48 <_free_r>:
 8001d48:	b538      	push	{r3, r4, r5, lr}
 8001d4a:	4605      	mov	r5, r0
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d040      	beq.n	8001dd2 <_free_r+0x8a>
 8001d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d54:	1f0c      	subs	r4, r1, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bfb8      	it	lt
 8001d5a:	18e4      	addlt	r4, r4, r3
 8001d5c:	f000 f8de 	bl	8001f1c <__malloc_lock>
 8001d60:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd4 <_free_r+0x8c>)
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	b933      	cbnz	r3, 8001d74 <_free_r+0x2c>
 8001d66:	6063      	str	r3, [r4, #4]
 8001d68:	6014      	str	r4, [r2, #0]
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d70:	f000 b8da 	b.w	8001f28 <__malloc_unlock>
 8001d74:	42a3      	cmp	r3, r4
 8001d76:	d908      	bls.n	8001d8a <_free_r+0x42>
 8001d78:	6820      	ldr	r0, [r4, #0]
 8001d7a:	1821      	adds	r1, r4, r0
 8001d7c:	428b      	cmp	r3, r1
 8001d7e:	bf01      	itttt	eq
 8001d80:	6819      	ldreq	r1, [r3, #0]
 8001d82:	685b      	ldreq	r3, [r3, #4]
 8001d84:	1809      	addeq	r1, r1, r0
 8001d86:	6021      	streq	r1, [r4, #0]
 8001d88:	e7ed      	b.n	8001d66 <_free_r+0x1e>
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	b10b      	cbz	r3, 8001d94 <_free_r+0x4c>
 8001d90:	42a3      	cmp	r3, r4
 8001d92:	d9fa      	bls.n	8001d8a <_free_r+0x42>
 8001d94:	6811      	ldr	r1, [r2, #0]
 8001d96:	1850      	adds	r0, r2, r1
 8001d98:	42a0      	cmp	r0, r4
 8001d9a:	d10b      	bne.n	8001db4 <_free_r+0x6c>
 8001d9c:	6820      	ldr	r0, [r4, #0]
 8001d9e:	4401      	add	r1, r0
 8001da0:	1850      	adds	r0, r2, r1
 8001da2:	4283      	cmp	r3, r0
 8001da4:	6011      	str	r1, [r2, #0]
 8001da6:	d1e0      	bne.n	8001d6a <_free_r+0x22>
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4408      	add	r0, r1
 8001dae:	6010      	str	r0, [r2, #0]
 8001db0:	6053      	str	r3, [r2, #4]
 8001db2:	e7da      	b.n	8001d6a <_free_r+0x22>
 8001db4:	d902      	bls.n	8001dbc <_free_r+0x74>
 8001db6:	230c      	movs	r3, #12
 8001db8:	602b      	str	r3, [r5, #0]
 8001dba:	e7d6      	b.n	8001d6a <_free_r+0x22>
 8001dbc:	6820      	ldr	r0, [r4, #0]
 8001dbe:	1821      	adds	r1, r4, r0
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	bf01      	itttt	eq
 8001dc4:	6819      	ldreq	r1, [r3, #0]
 8001dc6:	685b      	ldreq	r3, [r3, #4]
 8001dc8:	1809      	addeq	r1, r1, r0
 8001dca:	6021      	streq	r1, [r4, #0]
 8001dcc:	6063      	str	r3, [r4, #4]
 8001dce:	6054      	str	r4, [r2, #4]
 8001dd0:	e7cb      	b.n	8001d6a <_free_r+0x22>
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
 8001dd4:	20000294 	.word	0x20000294

08001dd8 <sbrk_aligned>:
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	4e0f      	ldr	r6, [pc, #60]	@ (8001e18 <sbrk_aligned+0x40>)
 8001ddc:	460c      	mov	r4, r1
 8001dde:	6831      	ldr	r1, [r6, #0]
 8001de0:	4605      	mov	r5, r0
 8001de2:	b911      	cbnz	r1, 8001dea <sbrk_aligned+0x12>
 8001de4:	f000 fbaa 	bl	800253c <_sbrk_r>
 8001de8:	6030      	str	r0, [r6, #0]
 8001dea:	4621      	mov	r1, r4
 8001dec:	4628      	mov	r0, r5
 8001dee:	f000 fba5 	bl	800253c <_sbrk_r>
 8001df2:	1c43      	adds	r3, r0, #1
 8001df4:	d103      	bne.n	8001dfe <sbrk_aligned+0x26>
 8001df6:	f04f 34ff 	mov.w	r4, #4294967295
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
 8001dfe:	1cc4      	adds	r4, r0, #3
 8001e00:	f024 0403 	bic.w	r4, r4, #3
 8001e04:	42a0      	cmp	r0, r4
 8001e06:	d0f8      	beq.n	8001dfa <sbrk_aligned+0x22>
 8001e08:	1a21      	subs	r1, r4, r0
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	f000 fb96 	bl	800253c <_sbrk_r>
 8001e10:	3001      	adds	r0, #1
 8001e12:	d1f2      	bne.n	8001dfa <sbrk_aligned+0x22>
 8001e14:	e7ef      	b.n	8001df6 <sbrk_aligned+0x1e>
 8001e16:	bf00      	nop
 8001e18:	20000290 	.word	0x20000290

08001e1c <_malloc_r>:
 8001e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e20:	1ccd      	adds	r5, r1, #3
 8001e22:	f025 0503 	bic.w	r5, r5, #3
 8001e26:	3508      	adds	r5, #8
 8001e28:	2d0c      	cmp	r5, #12
 8001e2a:	bf38      	it	cc
 8001e2c:	250c      	movcc	r5, #12
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	4606      	mov	r6, r0
 8001e32:	db01      	blt.n	8001e38 <_malloc_r+0x1c>
 8001e34:	42a9      	cmp	r1, r5
 8001e36:	d904      	bls.n	8001e42 <_malloc_r+0x26>
 8001e38:	230c      	movs	r3, #12
 8001e3a:	6033      	str	r3, [r6, #0]
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001f18 <_malloc_r+0xfc>
 8001e46:	f000 f869 	bl	8001f1c <__malloc_lock>
 8001e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8001e4e:	461c      	mov	r4, r3
 8001e50:	bb44      	cbnz	r4, 8001ea4 <_malloc_r+0x88>
 8001e52:	4629      	mov	r1, r5
 8001e54:	4630      	mov	r0, r6
 8001e56:	f7ff ffbf 	bl	8001dd8 <sbrk_aligned>
 8001e5a:	1c43      	adds	r3, r0, #1
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	d158      	bne.n	8001f12 <_malloc_r+0xf6>
 8001e60:	f8d8 4000 	ldr.w	r4, [r8]
 8001e64:	4627      	mov	r7, r4
 8001e66:	2f00      	cmp	r7, #0
 8001e68:	d143      	bne.n	8001ef2 <_malloc_r+0xd6>
 8001e6a:	2c00      	cmp	r4, #0
 8001e6c:	d04b      	beq.n	8001f06 <_malloc_r+0xea>
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	4639      	mov	r1, r7
 8001e72:	4630      	mov	r0, r6
 8001e74:	eb04 0903 	add.w	r9, r4, r3
 8001e78:	f000 fb60 	bl	800253c <_sbrk_r>
 8001e7c:	4581      	cmp	r9, r0
 8001e7e:	d142      	bne.n	8001f06 <_malloc_r+0xea>
 8001e80:	6821      	ldr	r1, [r4, #0]
 8001e82:	4630      	mov	r0, r6
 8001e84:	1a6d      	subs	r5, r5, r1
 8001e86:	4629      	mov	r1, r5
 8001e88:	f7ff ffa6 	bl	8001dd8 <sbrk_aligned>
 8001e8c:	3001      	adds	r0, #1
 8001e8e:	d03a      	beq.n	8001f06 <_malloc_r+0xea>
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	442b      	add	r3, r5
 8001e94:	6023      	str	r3, [r4, #0]
 8001e96:	f8d8 3000 	ldr.w	r3, [r8]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	bb62      	cbnz	r2, 8001ef8 <_malloc_r+0xdc>
 8001e9e:	f8c8 7000 	str.w	r7, [r8]
 8001ea2:	e00f      	b.n	8001ec4 <_malloc_r+0xa8>
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	1b52      	subs	r2, r2, r5
 8001ea8:	d420      	bmi.n	8001eec <_malloc_r+0xd0>
 8001eaa:	2a0b      	cmp	r2, #11
 8001eac:	d917      	bls.n	8001ede <_malloc_r+0xc2>
 8001eae:	1961      	adds	r1, r4, r5
 8001eb0:	42a3      	cmp	r3, r4
 8001eb2:	6025      	str	r5, [r4, #0]
 8001eb4:	bf18      	it	ne
 8001eb6:	6059      	strne	r1, [r3, #4]
 8001eb8:	6863      	ldr	r3, [r4, #4]
 8001eba:	bf08      	it	eq
 8001ebc:	f8c8 1000 	streq.w	r1, [r8]
 8001ec0:	5162      	str	r2, [r4, r5]
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f000 f82f 	bl	8001f28 <__malloc_unlock>
 8001eca:	f104 000b 	add.w	r0, r4, #11
 8001ece:	1d23      	adds	r3, r4, #4
 8001ed0:	f020 0007 	bic.w	r0, r0, #7
 8001ed4:	1ac2      	subs	r2, r0, r3
 8001ed6:	bf1c      	itt	ne
 8001ed8:	1a1b      	subne	r3, r3, r0
 8001eda:	50a3      	strne	r3, [r4, r2]
 8001edc:	e7af      	b.n	8001e3e <_malloc_r+0x22>
 8001ede:	6862      	ldr	r2, [r4, #4]
 8001ee0:	42a3      	cmp	r3, r4
 8001ee2:	bf0c      	ite	eq
 8001ee4:	f8c8 2000 	streq.w	r2, [r8]
 8001ee8:	605a      	strne	r2, [r3, #4]
 8001eea:	e7eb      	b.n	8001ec4 <_malloc_r+0xa8>
 8001eec:	4623      	mov	r3, r4
 8001eee:	6864      	ldr	r4, [r4, #4]
 8001ef0:	e7ae      	b.n	8001e50 <_malloc_r+0x34>
 8001ef2:	463c      	mov	r4, r7
 8001ef4:	687f      	ldr	r7, [r7, #4]
 8001ef6:	e7b6      	b.n	8001e66 <_malloc_r+0x4a>
 8001ef8:	461a      	mov	r2, r3
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	42a3      	cmp	r3, r4
 8001efe:	d1fb      	bne.n	8001ef8 <_malloc_r+0xdc>
 8001f00:	2300      	movs	r3, #0
 8001f02:	6053      	str	r3, [r2, #4]
 8001f04:	e7de      	b.n	8001ec4 <_malloc_r+0xa8>
 8001f06:	230c      	movs	r3, #12
 8001f08:	4630      	mov	r0, r6
 8001f0a:	6033      	str	r3, [r6, #0]
 8001f0c:	f000 f80c 	bl	8001f28 <__malloc_unlock>
 8001f10:	e794      	b.n	8001e3c <_malloc_r+0x20>
 8001f12:	6005      	str	r5, [r0, #0]
 8001f14:	e7d6      	b.n	8001ec4 <_malloc_r+0xa8>
 8001f16:	bf00      	nop
 8001f18:	20000294 	.word	0x20000294

08001f1c <__malloc_lock>:
 8001f1c:	4801      	ldr	r0, [pc, #4]	@ (8001f24 <__malloc_lock+0x8>)
 8001f1e:	f7ff bf11 	b.w	8001d44 <__retarget_lock_acquire_recursive>
 8001f22:	bf00      	nop
 8001f24:	2000028c 	.word	0x2000028c

08001f28 <__malloc_unlock>:
 8001f28:	4801      	ldr	r0, [pc, #4]	@ (8001f30 <__malloc_unlock+0x8>)
 8001f2a:	f7ff bf0c 	b.w	8001d46 <__retarget_lock_release_recursive>
 8001f2e:	bf00      	nop
 8001f30:	2000028c 	.word	0x2000028c

08001f34 <__ssputs_r>:
 8001f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f38:	461f      	mov	r7, r3
 8001f3a:	688e      	ldr	r6, [r1, #8]
 8001f3c:	4682      	mov	sl, r0
 8001f3e:	42be      	cmp	r6, r7
 8001f40:	460c      	mov	r4, r1
 8001f42:	4690      	mov	r8, r2
 8001f44:	680b      	ldr	r3, [r1, #0]
 8001f46:	d82d      	bhi.n	8001fa4 <__ssputs_r+0x70>
 8001f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001f4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001f50:	d026      	beq.n	8001fa0 <__ssputs_r+0x6c>
 8001f52:	6965      	ldr	r5, [r4, #20]
 8001f54:	6909      	ldr	r1, [r1, #16]
 8001f56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f5a:	eba3 0901 	sub.w	r9, r3, r1
 8001f5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f62:	1c7b      	adds	r3, r7, #1
 8001f64:	444b      	add	r3, r9
 8001f66:	106d      	asrs	r5, r5, #1
 8001f68:	429d      	cmp	r5, r3
 8001f6a:	bf38      	it	cc
 8001f6c:	461d      	movcc	r5, r3
 8001f6e:	0553      	lsls	r3, r2, #21
 8001f70:	d527      	bpl.n	8001fc2 <__ssputs_r+0x8e>
 8001f72:	4629      	mov	r1, r5
 8001f74:	f7ff ff52 	bl	8001e1c <_malloc_r>
 8001f78:	4606      	mov	r6, r0
 8001f7a:	b360      	cbz	r0, 8001fd6 <__ssputs_r+0xa2>
 8001f7c:	464a      	mov	r2, r9
 8001f7e:	6921      	ldr	r1, [r4, #16]
 8001f80:	f000 fafa 	bl	8002578 <memcpy>
 8001f84:	89a3      	ldrh	r3, [r4, #12]
 8001f86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f8e:	81a3      	strh	r3, [r4, #12]
 8001f90:	6126      	str	r6, [r4, #16]
 8001f92:	444e      	add	r6, r9
 8001f94:	6026      	str	r6, [r4, #0]
 8001f96:	463e      	mov	r6, r7
 8001f98:	6165      	str	r5, [r4, #20]
 8001f9a:	eba5 0509 	sub.w	r5, r5, r9
 8001f9e:	60a5      	str	r5, [r4, #8]
 8001fa0:	42be      	cmp	r6, r7
 8001fa2:	d900      	bls.n	8001fa6 <__ssputs_r+0x72>
 8001fa4:	463e      	mov	r6, r7
 8001fa6:	4632      	mov	r2, r6
 8001fa8:	4641      	mov	r1, r8
 8001faa:	6820      	ldr	r0, [r4, #0]
 8001fac:	f000 faac 	bl	8002508 <memmove>
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	68a3      	ldr	r3, [r4, #8]
 8001fb4:	1b9b      	subs	r3, r3, r6
 8001fb6:	60a3      	str	r3, [r4, #8]
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	4433      	add	r3, r6
 8001fbc:	6023      	str	r3, [r4, #0]
 8001fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc2:	462a      	mov	r2, r5
 8001fc4:	f000 fae6 	bl	8002594 <_realloc_r>
 8001fc8:	4606      	mov	r6, r0
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d1e0      	bne.n	8001f90 <__ssputs_r+0x5c>
 8001fce:	4650      	mov	r0, sl
 8001fd0:	6921      	ldr	r1, [r4, #16]
 8001fd2:	f7ff feb9 	bl	8001d48 <_free_r>
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	f8ca 3000 	str.w	r3, [sl]
 8001fdc:	89a3      	ldrh	r3, [r4, #12]
 8001fde:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fe6:	81a3      	strh	r3, [r4, #12]
 8001fe8:	e7e9      	b.n	8001fbe <__ssputs_r+0x8a>
	...

08001fec <_svfiprintf_r>:
 8001fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff0:	4698      	mov	r8, r3
 8001ff2:	898b      	ldrh	r3, [r1, #12]
 8001ff4:	4607      	mov	r7, r0
 8001ff6:	061b      	lsls	r3, r3, #24
 8001ff8:	460d      	mov	r5, r1
 8001ffa:	4614      	mov	r4, r2
 8001ffc:	b09d      	sub	sp, #116	@ 0x74
 8001ffe:	d510      	bpl.n	8002022 <_svfiprintf_r+0x36>
 8002000:	690b      	ldr	r3, [r1, #16]
 8002002:	b973      	cbnz	r3, 8002022 <_svfiprintf_r+0x36>
 8002004:	2140      	movs	r1, #64	@ 0x40
 8002006:	f7ff ff09 	bl	8001e1c <_malloc_r>
 800200a:	6028      	str	r0, [r5, #0]
 800200c:	6128      	str	r0, [r5, #16]
 800200e:	b930      	cbnz	r0, 800201e <_svfiprintf_r+0x32>
 8002010:	230c      	movs	r3, #12
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	b01d      	add	sp, #116	@ 0x74
 800201a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800201e:	2340      	movs	r3, #64	@ 0x40
 8002020:	616b      	str	r3, [r5, #20]
 8002022:	2300      	movs	r3, #0
 8002024:	9309      	str	r3, [sp, #36]	@ 0x24
 8002026:	2320      	movs	r3, #32
 8002028:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800202c:	2330      	movs	r3, #48	@ 0x30
 800202e:	f04f 0901 	mov.w	r9, #1
 8002032:	f8cd 800c 	str.w	r8, [sp, #12]
 8002036:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80021d0 <_svfiprintf_r+0x1e4>
 800203a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800203e:	4623      	mov	r3, r4
 8002040:	469a      	mov	sl, r3
 8002042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002046:	b10a      	cbz	r2, 800204c <_svfiprintf_r+0x60>
 8002048:	2a25      	cmp	r2, #37	@ 0x25
 800204a:	d1f9      	bne.n	8002040 <_svfiprintf_r+0x54>
 800204c:	ebba 0b04 	subs.w	fp, sl, r4
 8002050:	d00b      	beq.n	800206a <_svfiprintf_r+0x7e>
 8002052:	465b      	mov	r3, fp
 8002054:	4622      	mov	r2, r4
 8002056:	4629      	mov	r1, r5
 8002058:	4638      	mov	r0, r7
 800205a:	f7ff ff6b 	bl	8001f34 <__ssputs_r>
 800205e:	3001      	adds	r0, #1
 8002060:	f000 80a7 	beq.w	80021b2 <_svfiprintf_r+0x1c6>
 8002064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002066:	445a      	add	r2, fp
 8002068:	9209      	str	r2, [sp, #36]	@ 0x24
 800206a:	f89a 3000 	ldrb.w	r3, [sl]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 809f 	beq.w	80021b2 <_svfiprintf_r+0x1c6>
 8002074:	2300      	movs	r3, #0
 8002076:	f04f 32ff 	mov.w	r2, #4294967295
 800207a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800207e:	f10a 0a01 	add.w	sl, sl, #1
 8002082:	9304      	str	r3, [sp, #16]
 8002084:	9307      	str	r3, [sp, #28]
 8002086:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800208a:	931a      	str	r3, [sp, #104]	@ 0x68
 800208c:	4654      	mov	r4, sl
 800208e:	2205      	movs	r2, #5
 8002090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002094:	484e      	ldr	r0, [pc, #312]	@ (80021d0 <_svfiprintf_r+0x1e4>)
 8002096:	f000 fa61 	bl	800255c <memchr>
 800209a:	9a04      	ldr	r2, [sp, #16]
 800209c:	b9d8      	cbnz	r0, 80020d6 <_svfiprintf_r+0xea>
 800209e:	06d0      	lsls	r0, r2, #27
 80020a0:	bf44      	itt	mi
 80020a2:	2320      	movmi	r3, #32
 80020a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80020a8:	0711      	lsls	r1, r2, #28
 80020aa:	bf44      	itt	mi
 80020ac:	232b      	movmi	r3, #43	@ 0x2b
 80020ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80020b2:	f89a 3000 	ldrb.w	r3, [sl]
 80020b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80020b8:	d015      	beq.n	80020e6 <_svfiprintf_r+0xfa>
 80020ba:	4654      	mov	r4, sl
 80020bc:	2000      	movs	r0, #0
 80020be:	f04f 0c0a 	mov.w	ip, #10
 80020c2:	9a07      	ldr	r2, [sp, #28]
 80020c4:	4621      	mov	r1, r4
 80020c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020ca:	3b30      	subs	r3, #48	@ 0x30
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d94b      	bls.n	8002168 <_svfiprintf_r+0x17c>
 80020d0:	b1b0      	cbz	r0, 8002100 <_svfiprintf_r+0x114>
 80020d2:	9207      	str	r2, [sp, #28]
 80020d4:	e014      	b.n	8002100 <_svfiprintf_r+0x114>
 80020d6:	eba0 0308 	sub.w	r3, r0, r8
 80020da:	fa09 f303 	lsl.w	r3, r9, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	46a2      	mov	sl, r4
 80020e2:	9304      	str	r3, [sp, #16]
 80020e4:	e7d2      	b.n	800208c <_svfiprintf_r+0xa0>
 80020e6:	9b03      	ldr	r3, [sp, #12]
 80020e8:	1d19      	adds	r1, r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	9103      	str	r1, [sp, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bfbb      	ittet	lt
 80020f2:	425b      	neglt	r3, r3
 80020f4:	f042 0202 	orrlt.w	r2, r2, #2
 80020f8:	9307      	strge	r3, [sp, #28]
 80020fa:	9307      	strlt	r3, [sp, #28]
 80020fc:	bfb8      	it	lt
 80020fe:	9204      	strlt	r2, [sp, #16]
 8002100:	7823      	ldrb	r3, [r4, #0]
 8002102:	2b2e      	cmp	r3, #46	@ 0x2e
 8002104:	d10a      	bne.n	800211c <_svfiprintf_r+0x130>
 8002106:	7863      	ldrb	r3, [r4, #1]
 8002108:	2b2a      	cmp	r3, #42	@ 0x2a
 800210a:	d132      	bne.n	8002172 <_svfiprintf_r+0x186>
 800210c:	9b03      	ldr	r3, [sp, #12]
 800210e:	3402      	adds	r4, #2
 8002110:	1d1a      	adds	r2, r3, #4
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	9203      	str	r2, [sp, #12]
 8002116:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80021d4 <_svfiprintf_r+0x1e8>
 8002120:	2203      	movs	r2, #3
 8002122:	4650      	mov	r0, sl
 8002124:	7821      	ldrb	r1, [r4, #0]
 8002126:	f000 fa19 	bl	800255c <memchr>
 800212a:	b138      	cbz	r0, 800213c <_svfiprintf_r+0x150>
 800212c:	2240      	movs	r2, #64	@ 0x40
 800212e:	9b04      	ldr	r3, [sp, #16]
 8002130:	eba0 000a 	sub.w	r0, r0, sl
 8002134:	4082      	lsls	r2, r0
 8002136:	4313      	orrs	r3, r2
 8002138:	3401      	adds	r4, #1
 800213a:	9304      	str	r3, [sp, #16]
 800213c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002140:	2206      	movs	r2, #6
 8002142:	4825      	ldr	r0, [pc, #148]	@ (80021d8 <_svfiprintf_r+0x1ec>)
 8002144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002148:	f000 fa08 	bl	800255c <memchr>
 800214c:	2800      	cmp	r0, #0
 800214e:	d036      	beq.n	80021be <_svfiprintf_r+0x1d2>
 8002150:	4b22      	ldr	r3, [pc, #136]	@ (80021dc <_svfiprintf_r+0x1f0>)
 8002152:	bb1b      	cbnz	r3, 800219c <_svfiprintf_r+0x1b0>
 8002154:	9b03      	ldr	r3, [sp, #12]
 8002156:	3307      	adds	r3, #7
 8002158:	f023 0307 	bic.w	r3, r3, #7
 800215c:	3308      	adds	r3, #8
 800215e:	9303      	str	r3, [sp, #12]
 8002160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002162:	4433      	add	r3, r6
 8002164:	9309      	str	r3, [sp, #36]	@ 0x24
 8002166:	e76a      	b.n	800203e <_svfiprintf_r+0x52>
 8002168:	460c      	mov	r4, r1
 800216a:	2001      	movs	r0, #1
 800216c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002170:	e7a8      	b.n	80020c4 <_svfiprintf_r+0xd8>
 8002172:	2300      	movs	r3, #0
 8002174:	f04f 0c0a 	mov.w	ip, #10
 8002178:	4619      	mov	r1, r3
 800217a:	3401      	adds	r4, #1
 800217c:	9305      	str	r3, [sp, #20]
 800217e:	4620      	mov	r0, r4
 8002180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002184:	3a30      	subs	r2, #48	@ 0x30
 8002186:	2a09      	cmp	r2, #9
 8002188:	d903      	bls.n	8002192 <_svfiprintf_r+0x1a6>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0c6      	beq.n	800211c <_svfiprintf_r+0x130>
 800218e:	9105      	str	r1, [sp, #20]
 8002190:	e7c4      	b.n	800211c <_svfiprintf_r+0x130>
 8002192:	4604      	mov	r4, r0
 8002194:	2301      	movs	r3, #1
 8002196:	fb0c 2101 	mla	r1, ip, r1, r2
 800219a:	e7f0      	b.n	800217e <_svfiprintf_r+0x192>
 800219c:	ab03      	add	r3, sp, #12
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	462a      	mov	r2, r5
 80021a2:	4638      	mov	r0, r7
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <_svfiprintf_r+0x1f4>)
 80021a6:	a904      	add	r1, sp, #16
 80021a8:	f3af 8000 	nop.w
 80021ac:	1c42      	adds	r2, r0, #1
 80021ae:	4606      	mov	r6, r0
 80021b0:	d1d6      	bne.n	8002160 <_svfiprintf_r+0x174>
 80021b2:	89ab      	ldrh	r3, [r5, #12]
 80021b4:	065b      	lsls	r3, r3, #25
 80021b6:	f53f af2d 	bmi.w	8002014 <_svfiprintf_r+0x28>
 80021ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80021bc:	e72c      	b.n	8002018 <_svfiprintf_r+0x2c>
 80021be:	ab03      	add	r3, sp, #12
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	462a      	mov	r2, r5
 80021c4:	4638      	mov	r0, r7
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <_svfiprintf_r+0x1f4>)
 80021c8:	a904      	add	r1, sp, #16
 80021ca:	f000 f87d 	bl	80022c8 <_printf_i>
 80021ce:	e7ed      	b.n	80021ac <_svfiprintf_r+0x1c0>
 80021d0:	08002692 	.word	0x08002692
 80021d4:	08002698 	.word	0x08002698
 80021d8:	0800269c 	.word	0x0800269c
 80021dc:	00000000 	.word	0x00000000
 80021e0:	08001f35 	.word	0x08001f35

080021e4 <_printf_common>:
 80021e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021e8:	4616      	mov	r6, r2
 80021ea:	4698      	mov	r8, r3
 80021ec:	688a      	ldr	r2, [r1, #8]
 80021ee:	690b      	ldr	r3, [r1, #16]
 80021f0:	4607      	mov	r7, r0
 80021f2:	4293      	cmp	r3, r2
 80021f4:	bfb8      	it	lt
 80021f6:	4613      	movlt	r3, r2
 80021f8:	6033      	str	r3, [r6, #0]
 80021fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80021fe:	460c      	mov	r4, r1
 8002200:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002204:	b10a      	cbz	r2, 800220a <_printf_common+0x26>
 8002206:	3301      	adds	r3, #1
 8002208:	6033      	str	r3, [r6, #0]
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	0699      	lsls	r1, r3, #26
 800220e:	bf42      	ittt	mi
 8002210:	6833      	ldrmi	r3, [r6, #0]
 8002212:	3302      	addmi	r3, #2
 8002214:	6033      	strmi	r3, [r6, #0]
 8002216:	6825      	ldr	r5, [r4, #0]
 8002218:	f015 0506 	ands.w	r5, r5, #6
 800221c:	d106      	bne.n	800222c <_printf_common+0x48>
 800221e:	f104 0a19 	add.w	sl, r4, #25
 8002222:	68e3      	ldr	r3, [r4, #12]
 8002224:	6832      	ldr	r2, [r6, #0]
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	42ab      	cmp	r3, r5
 800222a:	dc2b      	bgt.n	8002284 <_printf_common+0xa0>
 800222c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002230:	6822      	ldr	r2, [r4, #0]
 8002232:	3b00      	subs	r3, #0
 8002234:	bf18      	it	ne
 8002236:	2301      	movne	r3, #1
 8002238:	0692      	lsls	r2, r2, #26
 800223a:	d430      	bmi.n	800229e <_printf_common+0xba>
 800223c:	4641      	mov	r1, r8
 800223e:	4638      	mov	r0, r7
 8002240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002244:	47c8      	blx	r9
 8002246:	3001      	adds	r0, #1
 8002248:	d023      	beq.n	8002292 <_printf_common+0xae>
 800224a:	6823      	ldr	r3, [r4, #0]
 800224c:	6922      	ldr	r2, [r4, #16]
 800224e:	f003 0306 	and.w	r3, r3, #6
 8002252:	2b04      	cmp	r3, #4
 8002254:	bf14      	ite	ne
 8002256:	2500      	movne	r5, #0
 8002258:	6833      	ldreq	r3, [r6, #0]
 800225a:	f04f 0600 	mov.w	r6, #0
 800225e:	bf08      	it	eq
 8002260:	68e5      	ldreq	r5, [r4, #12]
 8002262:	f104 041a 	add.w	r4, r4, #26
 8002266:	bf08      	it	eq
 8002268:	1aed      	subeq	r5, r5, r3
 800226a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800226e:	bf08      	it	eq
 8002270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002274:	4293      	cmp	r3, r2
 8002276:	bfc4      	itt	gt
 8002278:	1a9b      	subgt	r3, r3, r2
 800227a:	18ed      	addgt	r5, r5, r3
 800227c:	42b5      	cmp	r5, r6
 800227e:	d11a      	bne.n	80022b6 <_printf_common+0xd2>
 8002280:	2000      	movs	r0, #0
 8002282:	e008      	b.n	8002296 <_printf_common+0xb2>
 8002284:	2301      	movs	r3, #1
 8002286:	4652      	mov	r2, sl
 8002288:	4641      	mov	r1, r8
 800228a:	4638      	mov	r0, r7
 800228c:	47c8      	blx	r9
 800228e:	3001      	adds	r0, #1
 8002290:	d103      	bne.n	800229a <_printf_common+0xb6>
 8002292:	f04f 30ff 	mov.w	r0, #4294967295
 8002296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800229a:	3501      	adds	r5, #1
 800229c:	e7c1      	b.n	8002222 <_printf_common+0x3e>
 800229e:	2030      	movs	r0, #48	@ 0x30
 80022a0:	18e1      	adds	r1, r4, r3
 80022a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80022ac:	4422      	add	r2, r4
 80022ae:	3302      	adds	r3, #2
 80022b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80022b4:	e7c2      	b.n	800223c <_printf_common+0x58>
 80022b6:	2301      	movs	r3, #1
 80022b8:	4622      	mov	r2, r4
 80022ba:	4641      	mov	r1, r8
 80022bc:	4638      	mov	r0, r7
 80022be:	47c8      	blx	r9
 80022c0:	3001      	adds	r0, #1
 80022c2:	d0e6      	beq.n	8002292 <_printf_common+0xae>
 80022c4:	3601      	adds	r6, #1
 80022c6:	e7d9      	b.n	800227c <_printf_common+0x98>

080022c8 <_printf_i>:
 80022c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022cc:	7e0f      	ldrb	r7, [r1, #24]
 80022ce:	4691      	mov	r9, r2
 80022d0:	2f78      	cmp	r7, #120	@ 0x78
 80022d2:	4680      	mov	r8, r0
 80022d4:	460c      	mov	r4, r1
 80022d6:	469a      	mov	sl, r3
 80022d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80022da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80022de:	d807      	bhi.n	80022f0 <_printf_i+0x28>
 80022e0:	2f62      	cmp	r7, #98	@ 0x62
 80022e2:	d80a      	bhi.n	80022fa <_printf_i+0x32>
 80022e4:	2f00      	cmp	r7, #0
 80022e6:	f000 80d3 	beq.w	8002490 <_printf_i+0x1c8>
 80022ea:	2f58      	cmp	r7, #88	@ 0x58
 80022ec:	f000 80ba 	beq.w	8002464 <_printf_i+0x19c>
 80022f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80022f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80022f8:	e03a      	b.n	8002370 <_printf_i+0xa8>
 80022fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80022fe:	2b15      	cmp	r3, #21
 8002300:	d8f6      	bhi.n	80022f0 <_printf_i+0x28>
 8002302:	a101      	add	r1, pc, #4	@ (adr r1, 8002308 <_printf_i+0x40>)
 8002304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002308:	08002361 	.word	0x08002361
 800230c:	08002375 	.word	0x08002375
 8002310:	080022f1 	.word	0x080022f1
 8002314:	080022f1 	.word	0x080022f1
 8002318:	080022f1 	.word	0x080022f1
 800231c:	080022f1 	.word	0x080022f1
 8002320:	08002375 	.word	0x08002375
 8002324:	080022f1 	.word	0x080022f1
 8002328:	080022f1 	.word	0x080022f1
 800232c:	080022f1 	.word	0x080022f1
 8002330:	080022f1 	.word	0x080022f1
 8002334:	08002477 	.word	0x08002477
 8002338:	0800239f 	.word	0x0800239f
 800233c:	08002431 	.word	0x08002431
 8002340:	080022f1 	.word	0x080022f1
 8002344:	080022f1 	.word	0x080022f1
 8002348:	08002499 	.word	0x08002499
 800234c:	080022f1 	.word	0x080022f1
 8002350:	0800239f 	.word	0x0800239f
 8002354:	080022f1 	.word	0x080022f1
 8002358:	080022f1 	.word	0x080022f1
 800235c:	08002439 	.word	0x08002439
 8002360:	6833      	ldr	r3, [r6, #0]
 8002362:	1d1a      	adds	r2, r3, #4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6032      	str	r2, [r6, #0]
 8002368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800236c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002370:	2301      	movs	r3, #1
 8002372:	e09e      	b.n	80024b2 <_printf_i+0x1ea>
 8002374:	6833      	ldr	r3, [r6, #0]
 8002376:	6820      	ldr	r0, [r4, #0]
 8002378:	1d19      	adds	r1, r3, #4
 800237a:	6031      	str	r1, [r6, #0]
 800237c:	0606      	lsls	r6, r0, #24
 800237e:	d501      	bpl.n	8002384 <_printf_i+0xbc>
 8002380:	681d      	ldr	r5, [r3, #0]
 8002382:	e003      	b.n	800238c <_printf_i+0xc4>
 8002384:	0645      	lsls	r5, r0, #25
 8002386:	d5fb      	bpl.n	8002380 <_printf_i+0xb8>
 8002388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800238c:	2d00      	cmp	r5, #0
 800238e:	da03      	bge.n	8002398 <_printf_i+0xd0>
 8002390:	232d      	movs	r3, #45	@ 0x2d
 8002392:	426d      	negs	r5, r5
 8002394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002398:	230a      	movs	r3, #10
 800239a:	4859      	ldr	r0, [pc, #356]	@ (8002500 <_printf_i+0x238>)
 800239c:	e011      	b.n	80023c2 <_printf_i+0xfa>
 800239e:	6821      	ldr	r1, [r4, #0]
 80023a0:	6833      	ldr	r3, [r6, #0]
 80023a2:	0608      	lsls	r0, r1, #24
 80023a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80023a8:	d402      	bmi.n	80023b0 <_printf_i+0xe8>
 80023aa:	0649      	lsls	r1, r1, #25
 80023ac:	bf48      	it	mi
 80023ae:	b2ad      	uxthmi	r5, r5
 80023b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80023b2:	6033      	str	r3, [r6, #0]
 80023b4:	bf14      	ite	ne
 80023b6:	230a      	movne	r3, #10
 80023b8:	2308      	moveq	r3, #8
 80023ba:	4851      	ldr	r0, [pc, #324]	@ (8002500 <_printf_i+0x238>)
 80023bc:	2100      	movs	r1, #0
 80023be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80023c2:	6866      	ldr	r6, [r4, #4]
 80023c4:	2e00      	cmp	r6, #0
 80023c6:	bfa8      	it	ge
 80023c8:	6821      	ldrge	r1, [r4, #0]
 80023ca:	60a6      	str	r6, [r4, #8]
 80023cc:	bfa4      	itt	ge
 80023ce:	f021 0104 	bicge.w	r1, r1, #4
 80023d2:	6021      	strge	r1, [r4, #0]
 80023d4:	b90d      	cbnz	r5, 80023da <_printf_i+0x112>
 80023d6:	2e00      	cmp	r6, #0
 80023d8:	d04b      	beq.n	8002472 <_printf_i+0x1aa>
 80023da:	4616      	mov	r6, r2
 80023dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80023e0:	fb03 5711 	mls	r7, r3, r1, r5
 80023e4:	5dc7      	ldrb	r7, [r0, r7]
 80023e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80023ea:	462f      	mov	r7, r5
 80023ec:	42bb      	cmp	r3, r7
 80023ee:	460d      	mov	r5, r1
 80023f0:	d9f4      	bls.n	80023dc <_printf_i+0x114>
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d10b      	bne.n	800240e <_printf_i+0x146>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	07df      	lsls	r7, r3, #31
 80023fa:	d508      	bpl.n	800240e <_printf_i+0x146>
 80023fc:	6923      	ldr	r3, [r4, #16]
 80023fe:	6861      	ldr	r1, [r4, #4]
 8002400:	4299      	cmp	r1, r3
 8002402:	bfde      	ittt	le
 8002404:	2330      	movle	r3, #48	@ 0x30
 8002406:	f806 3c01 	strble.w	r3, [r6, #-1]
 800240a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800240e:	1b92      	subs	r2, r2, r6
 8002410:	6122      	str	r2, [r4, #16]
 8002412:	464b      	mov	r3, r9
 8002414:	4621      	mov	r1, r4
 8002416:	4640      	mov	r0, r8
 8002418:	f8cd a000 	str.w	sl, [sp]
 800241c:	aa03      	add	r2, sp, #12
 800241e:	f7ff fee1 	bl	80021e4 <_printf_common>
 8002422:	3001      	adds	r0, #1
 8002424:	d14a      	bne.n	80024bc <_printf_i+0x1f4>
 8002426:	f04f 30ff 	mov.w	r0, #4294967295
 800242a:	b004      	add	sp, #16
 800242c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	f043 0320 	orr.w	r3, r3, #32
 8002436:	6023      	str	r3, [r4, #0]
 8002438:	2778      	movs	r7, #120	@ 0x78
 800243a:	4832      	ldr	r0, [pc, #200]	@ (8002504 <_printf_i+0x23c>)
 800243c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	6831      	ldr	r1, [r6, #0]
 8002444:	061f      	lsls	r7, r3, #24
 8002446:	f851 5b04 	ldr.w	r5, [r1], #4
 800244a:	d402      	bmi.n	8002452 <_printf_i+0x18a>
 800244c:	065f      	lsls	r7, r3, #25
 800244e:	bf48      	it	mi
 8002450:	b2ad      	uxthmi	r5, r5
 8002452:	6031      	str	r1, [r6, #0]
 8002454:	07d9      	lsls	r1, r3, #31
 8002456:	bf44      	itt	mi
 8002458:	f043 0320 	orrmi.w	r3, r3, #32
 800245c:	6023      	strmi	r3, [r4, #0]
 800245e:	b11d      	cbz	r5, 8002468 <_printf_i+0x1a0>
 8002460:	2310      	movs	r3, #16
 8002462:	e7ab      	b.n	80023bc <_printf_i+0xf4>
 8002464:	4826      	ldr	r0, [pc, #152]	@ (8002500 <_printf_i+0x238>)
 8002466:	e7e9      	b.n	800243c <_printf_i+0x174>
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	f023 0320 	bic.w	r3, r3, #32
 800246e:	6023      	str	r3, [r4, #0]
 8002470:	e7f6      	b.n	8002460 <_printf_i+0x198>
 8002472:	4616      	mov	r6, r2
 8002474:	e7bd      	b.n	80023f2 <_printf_i+0x12a>
 8002476:	6833      	ldr	r3, [r6, #0]
 8002478:	6825      	ldr	r5, [r4, #0]
 800247a:	1d18      	adds	r0, r3, #4
 800247c:	6961      	ldr	r1, [r4, #20]
 800247e:	6030      	str	r0, [r6, #0]
 8002480:	062e      	lsls	r6, r5, #24
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	d501      	bpl.n	800248a <_printf_i+0x1c2>
 8002486:	6019      	str	r1, [r3, #0]
 8002488:	e002      	b.n	8002490 <_printf_i+0x1c8>
 800248a:	0668      	lsls	r0, r5, #25
 800248c:	d5fb      	bpl.n	8002486 <_printf_i+0x1be>
 800248e:	8019      	strh	r1, [r3, #0]
 8002490:	2300      	movs	r3, #0
 8002492:	4616      	mov	r6, r2
 8002494:	6123      	str	r3, [r4, #16]
 8002496:	e7bc      	b.n	8002412 <_printf_i+0x14a>
 8002498:	6833      	ldr	r3, [r6, #0]
 800249a:	2100      	movs	r1, #0
 800249c:	1d1a      	adds	r2, r3, #4
 800249e:	6032      	str	r2, [r6, #0]
 80024a0:	681e      	ldr	r6, [r3, #0]
 80024a2:	6862      	ldr	r2, [r4, #4]
 80024a4:	4630      	mov	r0, r6
 80024a6:	f000 f859 	bl	800255c <memchr>
 80024aa:	b108      	cbz	r0, 80024b0 <_printf_i+0x1e8>
 80024ac:	1b80      	subs	r0, r0, r6
 80024ae:	6060      	str	r0, [r4, #4]
 80024b0:	6863      	ldr	r3, [r4, #4]
 80024b2:	6123      	str	r3, [r4, #16]
 80024b4:	2300      	movs	r3, #0
 80024b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024ba:	e7aa      	b.n	8002412 <_printf_i+0x14a>
 80024bc:	4632      	mov	r2, r6
 80024be:	4649      	mov	r1, r9
 80024c0:	4640      	mov	r0, r8
 80024c2:	6923      	ldr	r3, [r4, #16]
 80024c4:	47d0      	blx	sl
 80024c6:	3001      	adds	r0, #1
 80024c8:	d0ad      	beq.n	8002426 <_printf_i+0x15e>
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	079b      	lsls	r3, r3, #30
 80024ce:	d413      	bmi.n	80024f8 <_printf_i+0x230>
 80024d0:	68e0      	ldr	r0, [r4, #12]
 80024d2:	9b03      	ldr	r3, [sp, #12]
 80024d4:	4298      	cmp	r0, r3
 80024d6:	bfb8      	it	lt
 80024d8:	4618      	movlt	r0, r3
 80024da:	e7a6      	b.n	800242a <_printf_i+0x162>
 80024dc:	2301      	movs	r3, #1
 80024de:	4632      	mov	r2, r6
 80024e0:	4649      	mov	r1, r9
 80024e2:	4640      	mov	r0, r8
 80024e4:	47d0      	blx	sl
 80024e6:	3001      	adds	r0, #1
 80024e8:	d09d      	beq.n	8002426 <_printf_i+0x15e>
 80024ea:	3501      	adds	r5, #1
 80024ec:	68e3      	ldr	r3, [r4, #12]
 80024ee:	9903      	ldr	r1, [sp, #12]
 80024f0:	1a5b      	subs	r3, r3, r1
 80024f2:	42ab      	cmp	r3, r5
 80024f4:	dcf2      	bgt.n	80024dc <_printf_i+0x214>
 80024f6:	e7eb      	b.n	80024d0 <_printf_i+0x208>
 80024f8:	2500      	movs	r5, #0
 80024fa:	f104 0619 	add.w	r6, r4, #25
 80024fe:	e7f5      	b.n	80024ec <_printf_i+0x224>
 8002500:	080026a3 	.word	0x080026a3
 8002504:	080026b4 	.word	0x080026b4

08002508 <memmove>:
 8002508:	4288      	cmp	r0, r1
 800250a:	b510      	push	{r4, lr}
 800250c:	eb01 0402 	add.w	r4, r1, r2
 8002510:	d902      	bls.n	8002518 <memmove+0x10>
 8002512:	4284      	cmp	r4, r0
 8002514:	4623      	mov	r3, r4
 8002516:	d807      	bhi.n	8002528 <memmove+0x20>
 8002518:	1e43      	subs	r3, r0, #1
 800251a:	42a1      	cmp	r1, r4
 800251c:	d008      	beq.n	8002530 <memmove+0x28>
 800251e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002526:	e7f8      	b.n	800251a <memmove+0x12>
 8002528:	4601      	mov	r1, r0
 800252a:	4402      	add	r2, r0
 800252c:	428a      	cmp	r2, r1
 800252e:	d100      	bne.n	8002532 <memmove+0x2a>
 8002530:	bd10      	pop	{r4, pc}
 8002532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800253a:	e7f7      	b.n	800252c <memmove+0x24>

0800253c <_sbrk_r>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	2300      	movs	r3, #0
 8002540:	4d05      	ldr	r5, [pc, #20]	@ (8002558 <_sbrk_r+0x1c>)
 8002542:	4604      	mov	r4, r0
 8002544:	4608      	mov	r0, r1
 8002546:	602b      	str	r3, [r5, #0]
 8002548:	f000 f85a 	bl	8002600 <_sbrk>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d102      	bne.n	8002556 <_sbrk_r+0x1a>
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	b103      	cbz	r3, 8002556 <_sbrk_r+0x1a>
 8002554:	6023      	str	r3, [r4, #0]
 8002556:	bd38      	pop	{r3, r4, r5, pc}
 8002558:	20000288 	.word	0x20000288

0800255c <memchr>:
 800255c:	4603      	mov	r3, r0
 800255e:	b510      	push	{r4, lr}
 8002560:	b2c9      	uxtb	r1, r1
 8002562:	4402      	add	r2, r0
 8002564:	4293      	cmp	r3, r2
 8002566:	4618      	mov	r0, r3
 8002568:	d101      	bne.n	800256e <memchr+0x12>
 800256a:	2000      	movs	r0, #0
 800256c:	e003      	b.n	8002576 <memchr+0x1a>
 800256e:	7804      	ldrb	r4, [r0, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	428c      	cmp	r4, r1
 8002574:	d1f6      	bne.n	8002564 <memchr+0x8>
 8002576:	bd10      	pop	{r4, pc}

08002578 <memcpy>:
 8002578:	440a      	add	r2, r1
 800257a:	4291      	cmp	r1, r2
 800257c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002580:	d100      	bne.n	8002584 <memcpy+0xc>
 8002582:	4770      	bx	lr
 8002584:	b510      	push	{r4, lr}
 8002586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800258a:	4291      	cmp	r1, r2
 800258c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002590:	d1f9      	bne.n	8002586 <memcpy+0xe>
 8002592:	bd10      	pop	{r4, pc}

08002594 <_realloc_r>:
 8002594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002598:	4680      	mov	r8, r0
 800259a:	4615      	mov	r5, r2
 800259c:	460c      	mov	r4, r1
 800259e:	b921      	cbnz	r1, 80025aa <_realloc_r+0x16>
 80025a0:	4611      	mov	r1, r2
 80025a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025a6:	f7ff bc39 	b.w	8001e1c <_malloc_r>
 80025aa:	b92a      	cbnz	r2, 80025b8 <_realloc_r+0x24>
 80025ac:	f7ff fbcc 	bl	8001d48 <_free_r>
 80025b0:	2400      	movs	r4, #0
 80025b2:	4620      	mov	r0, r4
 80025b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025b8:	f000 f81a 	bl	80025f0 <_malloc_usable_size_r>
 80025bc:	4285      	cmp	r5, r0
 80025be:	4606      	mov	r6, r0
 80025c0:	d802      	bhi.n	80025c8 <_realloc_r+0x34>
 80025c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80025c6:	d8f4      	bhi.n	80025b2 <_realloc_r+0x1e>
 80025c8:	4629      	mov	r1, r5
 80025ca:	4640      	mov	r0, r8
 80025cc:	f7ff fc26 	bl	8001e1c <_malloc_r>
 80025d0:	4607      	mov	r7, r0
 80025d2:	2800      	cmp	r0, #0
 80025d4:	d0ec      	beq.n	80025b0 <_realloc_r+0x1c>
 80025d6:	42b5      	cmp	r5, r6
 80025d8:	462a      	mov	r2, r5
 80025da:	4621      	mov	r1, r4
 80025dc:	bf28      	it	cs
 80025de:	4632      	movcs	r2, r6
 80025e0:	f7ff ffca 	bl	8002578 <memcpy>
 80025e4:	4621      	mov	r1, r4
 80025e6:	4640      	mov	r0, r8
 80025e8:	f7ff fbae 	bl	8001d48 <_free_r>
 80025ec:	463c      	mov	r4, r7
 80025ee:	e7e0      	b.n	80025b2 <_realloc_r+0x1e>

080025f0 <_malloc_usable_size_r>:
 80025f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025f4:	1f18      	subs	r0, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bfbc      	itt	lt
 80025fa:	580b      	ldrlt	r3, [r1, r0]
 80025fc:	18c0      	addlt	r0, r0, r3
 80025fe:	4770      	bx	lr

08002600 <_sbrk>:
 8002600:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <_sbrk+0x14>)
 8002602:	4603      	mov	r3, r0
 8002604:	6811      	ldr	r1, [r2, #0]
 8002606:	b909      	cbnz	r1, 800260c <_sbrk+0xc>
 8002608:	4903      	ldr	r1, [pc, #12]	@ (8002618 <_sbrk+0x18>)
 800260a:	6011      	str	r1, [r2, #0]
 800260c:	6810      	ldr	r0, [r2, #0]
 800260e:	4403      	add	r3, r0
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4770      	bx	lr
 8002614:	20000298 	.word	0x20000298
 8002618:	200002a0 	.word	0x200002a0

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
