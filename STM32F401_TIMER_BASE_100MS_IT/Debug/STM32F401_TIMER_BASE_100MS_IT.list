
STM32F401_TIMER_BASE_100MS_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001720  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080018b4  080018b4  000028b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018bc  080018bc  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080018bc  080018bc  000028bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018c4  080018c4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018c4  080018c4  000028c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018c8  080018c8  000028c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080018cc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080018d8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080018d8  000030bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b819  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191f  00000000  00000000  0000e855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00010178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008cc  00000000  00000000  00010ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ec2  00000000  00000000  00011574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9fe  00000000  00000000  00027436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce33  00000000  00000000  00033e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000c0cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000c3c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800189c 	.word	0x0800189c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800189c 	.word	0x0800189c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <SysTick_Handler>:
#include <main_app.h>

extern TIM_HandleTypeDef htim3;

void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004c8:	f000 f992 	bl	80007f0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004cc:	f000 fab5 	bl	8000a3a <HAL_SYSTICK_IRQHandler>


}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void) //Name from startupxxxx.s file
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim3);
 80004d8:	4802      	ldr	r0, [pc, #8]	@ (80004e4 <TIM3_IRQHandler+0x10>)
 80004da:	f000 fd3f 	bl	8000f5c <HAL_TIM_IRQHandler>



}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000070 	.word	0x20000070

080004e8 <main>:

TIM_HandleTypeDef htim3;


int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

	HAL_Init();
 80004ec:	f000 f92e 	bl	800074c <HAL_Init>
	SystemClockConfig();
 80004f0:	f000 f822 	bl	8000538 <SystemClockConfig>
	TIM3_Init();
 80004f4:	f000 f80a 	bl	800050c <TIM3_Init>
	UART1_Init();
 80004f8:	f000 f826 	bl	8000548 <UART1_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <main+0x20>)
 80004fe:	f000 fccb 	bl	8000e98 <HAL_TIM_Base_Start_IT>

	while(1){
 8000502:	bf00      	nop
 8000504:	e7fd      	b.n	8000502 <main+0x1a>
 8000506:	bf00      	nop
 8000508:	20000070 	.word	0x20000070

0800050c <TIM3_Init>:

	return 0;
}

void TIM3_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	htim3.Instance = TIM3;
 8000510:	4b07      	ldr	r3, [pc, #28]	@ (8000530 <TIM3_Init+0x24>)
 8000512:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <TIM3_Init+0x28>)
 8000514:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 39;//htim3.Init.Prescaler = 39; This is for 100 ms.
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <TIM3_Init+0x24>)
 8000518:	2227      	movs	r2, #39	@ 0x27
 800051a:	605a      	str	r2, [r3, #4]
	htim3.Init.Period = 40000-1;
 800051c:	4b04      	ldr	r3, [pc, #16]	@ (8000530 <TIM3_Init+0x24>)
 800051e:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000522:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Init(&htim3);
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <TIM3_Init+0x24>)
 8000526:	f000 fc67 	bl	8000df8 <HAL_TIM_Base_Init>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000070 	.word	0x20000070
 8000534:	40000400 	.word	0x40000400

08000538 <SystemClockConfig>:


void SystemClockConfig(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0


}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <UART1_Init>:

void UART1_Init()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	huart1.Instance = USART1;
 800054c:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <UART1_Init+0x44>)
 800054e:	4a10      	ldr	r2, [pc, #64]	@ (8000590 <UART1_Init+0x48>)
 8000550:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000552:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <UART1_Init+0x44>)
 8000554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000558:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <UART1_Init+0x44>)
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000560:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <UART1_Init+0x44>)
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <UART1_Init+0x44>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800056c:	4b07      	ldr	r3, [pc, #28]	@ (800058c <UART1_Init+0x44>)
 800056e:	220c      	movs	r2, #12
 8000570:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000572:	4b06      	ldr	r3, [pc, #24]	@ (800058c <UART1_Init+0x44>)
 8000574:	2200      	movs	r2, #0
 8000576:	619a      	str	r2, [r3, #24]

	if(HAL_UART_Init(&huart1) != HAL_OK){
 8000578:	4804      	ldr	r0, [pc, #16]	@ (800058c <UART1_Init+0x44>)
 800057a:	f000 fea7 	bl	80012cc <HAL_UART_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <UART1_Init+0x40>
		Error_handler();
 8000584:	f000 f806 	bl	8000594 <Error_handler>
	}

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000028 	.word	0x20000028
 8000590:	40011000 	.word	0x40011000

08000594 <Error_handler>:

void Error_handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

   while(1);
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <Error_handler+0x4>

0800059c <HAL_TIM_PeriodElapsedCallback>:

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80005aa:	f000 fbd7 	bl	8000d5c <HAL_GPIO_TogglePin>


}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40020800 	.word	0x40020800

080005bc <HAL_MspInit>:
 *      Author: Lenovo
 */
#include <main_app.h>

void HAL_MspInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0

	// there would be a HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) call here.
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80005c2:	2005      	movs	r0, #5
 80005c4:	f000 f9f8 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>
	// On F401 Black pill blue led is connected to PC13

	  GPIO_InitTypeDef gpio_led;
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <HAL_MspInit+0x48>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <HAL_MspInit+0x48>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <HAL_MspInit+0x48>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

	    gpio_led.Pin = GPIO_PIN_13;
 80005e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e8:	607b      	str	r3, [r7, #4]
		gpio_led.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	60bb      	str	r3, [r7, #8]
		gpio_led.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]

		HAL_GPIO_Init(GPIOC, &gpio_led);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4804      	ldr	r0, [pc, #16]	@ (8000608 <HAL_MspInit+0x4c>)
 80005f8:	f000 fa2c 	bl	8000a54 <HAL_GPIO_Init>


}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40020800 	.word	0x40020800

0800060c <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

	__HAL_RCC_TIM3_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <HAL_TIM_Base_MspInit+0x30>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a07      	ldr	r2, [pc, #28]	@ (800063c <HAL_TIM_Base_MspInit+0x30>)
 800061e:	f043 0302 	orr.w	r3, r3, #2
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <HAL_TIM_Base_MspInit+0x30>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 0302 	and.w	r3, r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
	//HAL_NVIC_EnableIRQ(TIM3_IRQn);
	//HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);

}
 8000630:	bf00      	nop
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	40023800 	.word	0x40023800

08000640 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//Enable the clock for uart and GPIO pins
	__HAL_RCC_USART1_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <HAL_UART_MspInit+0x8c>)
 800064e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000650:	4a1e      	ldr	r2, [pc, #120]	@ (80006cc <HAL_UART_MspInit+0x8c>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6453      	str	r3, [r2, #68]	@ 0x44
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <HAL_UART_MspInit+0x8c>)
 800065a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800065c:	f003 0310 	and.w	r3, r3, #16
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <HAL_UART_MspInit+0x8c>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066c:	4a17      	ldr	r2, [pc, #92]	@ (80006cc <HAL_UART_MspInit+0x8c>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6313      	str	r3, [r2, #48]	@ 0x30
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <HAL_UART_MspInit+0x8c>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]

	//Do the pin mux configurations
	gpio_uart.Pin = GPIO_PIN_9;
 8000680:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000684:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 800068a:	2301      	movs	r3, #1
 800068c:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART1; //USART1 TX
 8000692:	2307      	movs	r3, #7
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <HAL_UART_MspInit+0x90>)
 800069e:	f000 f9d9 	bl	8000a54 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_10; //USART1 RX
 80006a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4808      	ldr	r0, [pc, #32]	@ (80006d0 <HAL_UART_MspInit+0x90>)
 80006b0:	f000 f9d0 	bl	8000a54 <HAL_GPIO_Init>

	//Enable IRQ and set up the priority
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006b4:	2025      	movs	r0, #37	@ 0x25
 80006b6:	f000 f9a6 	bl	8000a06 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2101      	movs	r1, #1
 80006be:	2025      	movs	r0, #37	@ 0x25
 80006c0:	f000 f985 	bl	80009ce <HAL_NVIC_SetPriority>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	@ 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000

080006d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <SystemInit+0x20>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006de:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <SystemInit+0x20>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000730 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006fc:	f7ff ffea 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	@ (8000734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	@ (8000738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	@ (8000744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000726:	f001 f895 	bl	8001854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072a:	f7ff fedd 	bl	80004e8 <main>
  bx  lr    
 800072e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000730:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800073c:	080018cc 	.word	0x080018cc
  ldr r2, =_sbss
 8000740:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000744:	200000bc 	.word	0x200000bc

08000748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC_IRQHandler>
	...

0800074c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <HAL_Init+0x40>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <HAL_Init+0x40>)
 8000756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800075a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800075c:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <HAL_Init+0x40>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <HAL_Init+0x40>)
 8000762:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <HAL_Init+0x40>)
 800076e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f91f 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	200f      	movs	r0, #15
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff ff1c 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023c00 	.word	0x40023c00

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f937 	bl	8000a22 <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f8ff 	bl	80009ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	@ (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_IncTick+0x20>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_IncTick+0x24>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <HAL_IncTick+0x24>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000008 	.word	0x20000008
 8000814:	200000b8 	.word	0x200000b8

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084a:	4a04      	ldr	r2, [pc, #16]	@ (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60d3      	str	r3, [r2, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db0b      	blt.n	80008a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 021f 	and.w	r2, r3, #31
 8000894:	4907      	ldr	r1, [pc, #28]	@ (80008b4 <__NVIC_EnableIRQ+0x38>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	2001      	movs	r0, #1
 800089e:	fa00 f202 	lsl.w	r2, r0, r2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	@ (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	@ (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	@ 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	@ 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000984:	d301      	bcc.n	800098a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000986:	2301      	movs	r3, #1
 8000988:	e00f      	b.n	80009aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <SysTick_Config+0x40>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000992:	210f      	movs	r1, #15
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f7ff ff8e 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <SysTick_Config+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a2:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <SysTick_Config+0x40>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff29 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e0:	f7ff ff3e 	bl	8000860 <__NVIC_GetPriorityGrouping>
 80009e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff ff8e 	bl	800090c <NVIC_EncodePriority>
 80009f0:	4602      	mov	r2, r0
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff5d 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff31 	bl	800087c <__NVIC_EnableIRQ>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffa2 	bl	8000974 <SysTick_Config>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a3e:	f000 f802 	bl	8000a46 <HAL_SYSTICK_Callback>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	@ 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	e159      	b.n	8000d24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a70:	2201      	movs	r2, #1
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	f040 8148 	bne.w	8000d1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 0303 	and.w	r3, r3, #3
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d005      	beq.n	8000aa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d130      	bne.n	8000b08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	68da      	ldr	r2, [r3, #12]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000adc:	2201      	movs	r2, #1
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	f003 0201 	and.w	r2, r3, #1
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d017      	beq.n	8000b44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 0303 	and.w	r3, r3, #3
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d123      	bne.n	8000b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	08da      	lsrs	r2, r3, #3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3208      	adds	r2, #8
 8000b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	220f      	movs	r2, #15
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	08da      	lsrs	r2, r3, #3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3208      	adds	r2, #8
 8000b92:	69b9      	ldr	r1, [r7, #24]
 8000b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4013      	ands	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0203 	and.w	r2, r3, #3
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f000 80a2 	beq.w	8000d1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b57      	ldr	r3, [pc, #348]	@ (8000d3c <HAL_GPIO_Init+0x2e8>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a56      	ldr	r2, [pc, #344]	@ (8000d3c <HAL_GPIO_Init+0x2e8>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b54      	ldr	r3, [pc, #336]	@ (8000d3c <HAL_GPIO_Init+0x2e8>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf6:	4a52      	ldr	r2, [pc, #328]	@ (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a49      	ldr	r2, [pc, #292]	@ (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d019      	beq.n	8000c56 <HAL_GPIO_Init+0x202>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a48      	ldr	r2, [pc, #288]	@ (8000d48 <HAL_GPIO_Init+0x2f4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d013      	beq.n	8000c52 <HAL_GPIO_Init+0x1fe>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a47      	ldr	r2, [pc, #284]	@ (8000d4c <HAL_GPIO_Init+0x2f8>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d00d      	beq.n	8000c4e <HAL_GPIO_Init+0x1fa>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a46      	ldr	r2, [pc, #280]	@ (8000d50 <HAL_GPIO_Init+0x2fc>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d007      	beq.n	8000c4a <HAL_GPIO_Init+0x1f6>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a45      	ldr	r2, [pc, #276]	@ (8000d54 <HAL_GPIO_Init+0x300>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d101      	bne.n	8000c46 <HAL_GPIO_Init+0x1f2>
 8000c42:	2304      	movs	r3, #4
 8000c44:	e008      	b.n	8000c58 <HAL_GPIO_Init+0x204>
 8000c46:	2307      	movs	r3, #7
 8000c48:	e006      	b.n	8000c58 <HAL_GPIO_Init+0x204>
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e004      	b.n	8000c58 <HAL_GPIO_Init+0x204>
 8000c4e:	2302      	movs	r3, #2
 8000c50:	e002      	b.n	8000c58 <HAL_GPIO_Init+0x204>
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <HAL_GPIO_Init+0x204>
 8000c56:	2300      	movs	r3, #0
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	f002 0203 	and.w	r2, r2, #3
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	4093      	lsls	r3, r2
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c68:	4935      	ldr	r1, [pc, #212]	@ (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c76:	4b38      	ldr	r3, [pc, #224]	@ (8000d58 <HAL_GPIO_Init+0x304>)
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4013      	ands	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d58 <HAL_GPIO_Init+0x304>)
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d58 <HAL_GPIO_Init+0x304>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000cc4:	4a24      	ldr	r2, [pc, #144]	@ (8000d58 <HAL_GPIO_Init+0x304>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cca:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <HAL_GPIO_Init+0x304>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000cee:	4a1a      	ldr	r2, [pc, #104]	@ (8000d58 <HAL_GPIO_Init+0x304>)
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_GPIO_Init+0x304>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d18:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <HAL_GPIO_Init+0x304>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3301      	adds	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	f67f aea2 	bls.w	8000a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3724      	adds	r7, #36	@ 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40013c00 	.word	0x40013c00

08000d5c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	041a      	lsls	r2, r3, #16
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43d9      	mvns	r1, r3
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	619a      	str	r2, [r3, #24]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000000 	.word	0x20000000

08000da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000dac:	f7ff fff0 	bl	8000d90 <HAL_RCC_GetHCLKFreq>
 8000db0:	4602      	mov	r2, r0
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	0a9b      	lsrs	r3, r3, #10
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	4903      	ldr	r1, [pc, #12]	@ (8000dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dbe:	5ccb      	ldrb	r3, [r1, r3]
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	080018b4 	.word	0x080018b4

08000dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000dd4:	f7ff ffdc 	bl	8000d90 <HAL_RCC_GetHCLKFreq>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	0b5b      	lsrs	r3, r3, #13
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	4903      	ldr	r1, [pc, #12]	@ (8000df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000de6:	5ccb      	ldrb	r3, [r1, r3]
 8000de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	080018b4 	.word	0x080018b4

08000df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e041      	b.n	8000e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fbf4 	bl	800060c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2202      	movs	r2, #2
 8000e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3304      	adds	r3, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4610      	mov	r0, r2
 8000e38:	f000 f9a8 	bl	800118c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2201      	movs	r2, #1
 8000e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d001      	beq.n	8000eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e044      	b.n	8000f3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8000f48 <HAL_TIM_Base_Start_IT+0xb0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d018      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x6c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eda:	d013      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x6c>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <HAL_TIM_Base_Start_IT+0xb4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00e      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x6c>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a19      	ldr	r2, [pc, #100]	@ (8000f50 <HAL_TIM_Base_Start_IT+0xb8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d009      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x6c>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a17      	ldr	r2, [pc, #92]	@ (8000f54 <HAL_TIM_Base_Start_IT+0xbc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d004      	beq.n	8000f04 <HAL_TIM_Base_Start_IT+0x6c>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <HAL_TIM_Base_Start_IT+0xc0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d111      	bne.n	8000f28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d010      	beq.n	8000f38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0201 	orr.w	r2, r2, #1
 8000f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f26:	e007      	b.n	8000f38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f042 0201 	orr.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40000400 	.word	0x40000400
 8000f50:	40000800 	.word	0x40000800
 8000f54:	40000c00 	.word	0x40000c00
 8000f58:	40014000 	.word	0x40014000

08000f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d020      	beq.n	8000fc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d01b      	beq.n	8000fc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f06f 0202 	mvn.w	r2, #2
 8000f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f8d2 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8000fac:	e005      	b.n	8000fba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f8c4 	bl	800113c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f8d5 	bl	8001164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d020      	beq.n	800100c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01b      	beq.n	800100c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f06f 0204 	mvn.w	r2, #4
 8000fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f8ac 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8000ff8:	e005      	b.n	8001006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f89e 	bl	800113c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f8af 	bl	8001164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d020      	beq.n	8001058 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d01b      	beq.n	8001058 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f06f 0208 	mvn.w	r2, #8
 8001028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2204      	movs	r2, #4
 800102e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f886 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8001044:	e005      	b.n	8001052 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 f878 	bl	800113c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f889 	bl	8001164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	2b00      	cmp	r3, #0
 8001060:	d020      	beq.n	80010a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	2b00      	cmp	r3, #0
 800106a:	d01b      	beq.n	80010a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f06f 0210 	mvn.w	r2, #16
 8001074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2208      	movs	r2, #8
 800107a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f860 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8001090:	e005      	b.n	800109e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f852 	bl	800113c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 f863 	bl	8001164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f06f 0201 	mvn.w	r2, #1
 80010c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fa6a 	bl	800059c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00c      	beq.n	80010ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80010e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8e6 	bl	80012b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d00c      	beq.n	8001110 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f834 	bl	8001178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00c      	beq.n	8001134 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f06f 0220 	mvn.w	r2, #32
 800112c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f8b8 	bl	80012a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a3a      	ldr	r2, [pc, #232]	@ (8001288 <TIM_Base_SetConfig+0xfc>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00f      	beq.n	80011c4 <TIM_Base_SetConfig+0x38>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011aa:	d00b      	beq.n	80011c4 <TIM_Base_SetConfig+0x38>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a37      	ldr	r2, [pc, #220]	@ (800128c <TIM_Base_SetConfig+0x100>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <TIM_Base_SetConfig+0x38>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a36      	ldr	r2, [pc, #216]	@ (8001290 <TIM_Base_SetConfig+0x104>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d003      	beq.n	80011c4 <TIM_Base_SetConfig+0x38>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a35      	ldr	r2, [pc, #212]	@ (8001294 <TIM_Base_SetConfig+0x108>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d108      	bne.n	80011d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80011ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001288 <TIM_Base_SetConfig+0xfc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01b      	beq.n	8001216 <TIM_Base_SetConfig+0x8a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011e4:	d017      	beq.n	8001216 <TIM_Base_SetConfig+0x8a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a28      	ldr	r2, [pc, #160]	@ (800128c <TIM_Base_SetConfig+0x100>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d013      	beq.n	8001216 <TIM_Base_SetConfig+0x8a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a27      	ldr	r2, [pc, #156]	@ (8001290 <TIM_Base_SetConfig+0x104>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00f      	beq.n	8001216 <TIM_Base_SetConfig+0x8a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a26      	ldr	r2, [pc, #152]	@ (8001294 <TIM_Base_SetConfig+0x108>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d00b      	beq.n	8001216 <TIM_Base_SetConfig+0x8a>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a25      	ldr	r2, [pc, #148]	@ (8001298 <TIM_Base_SetConfig+0x10c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d007      	beq.n	8001216 <TIM_Base_SetConfig+0x8a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a24      	ldr	r2, [pc, #144]	@ (800129c <TIM_Base_SetConfig+0x110>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d003      	beq.n	8001216 <TIM_Base_SetConfig+0x8a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a23      	ldr	r2, [pc, #140]	@ (80012a0 <TIM_Base_SetConfig+0x114>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d108      	bne.n	8001228 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800121c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4313      	orrs	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <TIM_Base_SetConfig+0xfc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d103      	bne.n	800125c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b01      	cmp	r3, #1
 800126c:	d105      	bne.n	800127a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f023 0201 	bic.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	611a      	str	r2, [r3, #16]
  }
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40010000 	.word	0x40010000
 800128c:	40000400 	.word	0x40000400
 8001290:	40000800 	.word	0x40000800
 8001294:	40000c00 	.word	0x40000c00
 8001298:	40014000 	.word	0x40014000
 800129c:	40014400 	.word	0x40014400
 80012a0:	40014800 	.word	0x40014800

080012a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e042      	b.n	8001364 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d106      	bne.n	80012f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff f9a4 	bl	8000640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2224      	movs	r2, #36	@ 0x24
 80012fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800130e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f82b 	bl	800136c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2220      	movs	r2, #32
 8001358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800136c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001370:	b0c0      	sub	sp, #256	@ 0x100
 8001372:	af00      	add	r7, sp, #0
 8001374:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001388:	68d9      	ldr	r1, [r3, #12]
 800138a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	ea40 0301 	orr.w	r3, r0, r1
 8001394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80013b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80013c4:	f021 010c 	bic.w	r1, r1, #12
 80013c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80013d2:	430b      	orrs	r3, r1
 80013d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80013d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80013e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013e6:	6999      	ldr	r1, [r3, #24]
 80013e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	ea40 0301 	orr.w	r3, r0, r1
 80013f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b8f      	ldr	r3, [pc, #572]	@ (8001638 <UART_SetConfig+0x2cc>)
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d005      	beq.n	800140c <UART_SetConfig+0xa0>
 8001400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b8d      	ldr	r3, [pc, #564]	@ (800163c <UART_SetConfig+0x2d0>)
 8001408:	429a      	cmp	r2, r3
 800140a:	d104      	bne.n	8001416 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800140c:	f7ff fce0 	bl	8000dd0 <HAL_RCC_GetPCLK2Freq>
 8001410:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001414:	e003      	b.n	800141e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001416:	f7ff fcc7 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800141a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800141e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001428:	f040 810c 	bne.w	8001644 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800142c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001430:	2200      	movs	r2, #0
 8001432:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001436:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800143a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800143e:	4622      	mov	r2, r4
 8001440:	462b      	mov	r3, r5
 8001442:	1891      	adds	r1, r2, r2
 8001444:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001446:	415b      	adcs	r3, r3
 8001448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800144a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800144e:	4621      	mov	r1, r4
 8001450:	eb12 0801 	adds.w	r8, r2, r1
 8001454:	4629      	mov	r1, r5
 8001456:	eb43 0901 	adc.w	r9, r3, r1
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800146a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800146e:	4690      	mov	r8, r2
 8001470:	4699      	mov	r9, r3
 8001472:	4623      	mov	r3, r4
 8001474:	eb18 0303 	adds.w	r3, r8, r3
 8001478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800147c:	462b      	mov	r3, r5
 800147e:	eb49 0303 	adc.w	r3, r9, r3
 8001482:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001492:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001496:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800149a:	460b      	mov	r3, r1
 800149c:	18db      	adds	r3, r3, r3
 800149e:	653b      	str	r3, [r7, #80]	@ 0x50
 80014a0:	4613      	mov	r3, r2
 80014a2:	eb42 0303 	adc.w	r3, r2, r3
 80014a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80014a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80014ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80014b0:	f7fe fe90 	bl	80001d4 <__aeabi_uldivmod>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4b61      	ldr	r3, [pc, #388]	@ (8001640 <UART_SetConfig+0x2d4>)
 80014ba:	fba3 2302 	umull	r2, r3, r3, r2
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	011c      	lsls	r4, r3, #4
 80014c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014c6:	2200      	movs	r2, #0
 80014c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80014cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80014d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80014d4:	4642      	mov	r2, r8
 80014d6:	464b      	mov	r3, r9
 80014d8:	1891      	adds	r1, r2, r2
 80014da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80014dc:	415b      	adcs	r3, r3
 80014de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80014e4:	4641      	mov	r1, r8
 80014e6:	eb12 0a01 	adds.w	sl, r2, r1
 80014ea:	4649      	mov	r1, r9
 80014ec:	eb43 0b01 	adc.w	fp, r3, r1
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001504:	4692      	mov	sl, r2
 8001506:	469b      	mov	fp, r3
 8001508:	4643      	mov	r3, r8
 800150a:	eb1a 0303 	adds.w	r3, sl, r3
 800150e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001512:	464b      	mov	r3, r9
 8001514:	eb4b 0303 	adc.w	r3, fp, r3
 8001518:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800151c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001528:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800152c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001530:	460b      	mov	r3, r1
 8001532:	18db      	adds	r3, r3, r3
 8001534:	643b      	str	r3, [r7, #64]	@ 0x40
 8001536:	4613      	mov	r3, r2
 8001538:	eb42 0303 	adc.w	r3, r2, r3
 800153c:	647b      	str	r3, [r7, #68]	@ 0x44
 800153e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001542:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001546:	f7fe fe45 	bl	80001d4 <__aeabi_uldivmod>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4611      	mov	r1, r2
 8001550:	4b3b      	ldr	r3, [pc, #236]	@ (8001640 <UART_SetConfig+0x2d4>)
 8001552:	fba3 2301 	umull	r2, r3, r3, r1
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2264      	movs	r2, #100	@ 0x64
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	1acb      	subs	r3, r1, r3
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001566:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <UART_SetConfig+0x2d4>)
 8001568:	fba3 2302 	umull	r2, r3, r3, r2
 800156c:	095b      	lsrs	r3, r3, #5
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001574:	441c      	add	r4, r3
 8001576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800157a:	2200      	movs	r2, #0
 800157c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001580:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001584:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001588:	4642      	mov	r2, r8
 800158a:	464b      	mov	r3, r9
 800158c:	1891      	adds	r1, r2, r2
 800158e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001590:	415b      	adcs	r3, r3
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001594:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001598:	4641      	mov	r1, r8
 800159a:	1851      	adds	r1, r2, r1
 800159c:	6339      	str	r1, [r7, #48]	@ 0x30
 800159e:	4649      	mov	r1, r9
 80015a0:	414b      	adcs	r3, r1
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80015b0:	4659      	mov	r1, fp
 80015b2:	00cb      	lsls	r3, r1, #3
 80015b4:	4651      	mov	r1, sl
 80015b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015ba:	4651      	mov	r1, sl
 80015bc:	00ca      	lsls	r2, r1, #3
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	4603      	mov	r3, r0
 80015c4:	4642      	mov	r2, r8
 80015c6:	189b      	adds	r3, r3, r2
 80015c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015cc:	464b      	mov	r3, r9
 80015ce:	460a      	mov	r2, r1
 80015d0:	eb42 0303 	adc.w	r3, r2, r3
 80015d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80015e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80015e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80015ec:	460b      	mov	r3, r1
 80015ee:	18db      	adds	r3, r3, r3
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015f2:	4613      	mov	r3, r2
 80015f4:	eb42 0303 	adc.w	r3, r2, r3
 80015f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001602:	f7fe fde7 	bl	80001d4 <__aeabi_uldivmod>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <UART_SetConfig+0x2d4>)
 800160c:	fba3 1302 	umull	r1, r3, r3, r2
 8001610:	095b      	lsrs	r3, r3, #5
 8001612:	2164      	movs	r1, #100	@ 0x64
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	3332      	adds	r3, #50	@ 0x32
 800161e:	4a08      	ldr	r2, [pc, #32]	@ (8001640 <UART_SetConfig+0x2d4>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	095b      	lsrs	r3, r3, #5
 8001626:	f003 0207 	and.w	r2, r3, #7
 800162a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4422      	add	r2, r4
 8001632:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001634:	e106      	b.n	8001844 <UART_SetConfig+0x4d8>
 8001636:	bf00      	nop
 8001638:	40011000 	.word	0x40011000
 800163c:	40011400 	.word	0x40011400
 8001640:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001648:	2200      	movs	r2, #0
 800164a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800164e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001652:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001656:	4642      	mov	r2, r8
 8001658:	464b      	mov	r3, r9
 800165a:	1891      	adds	r1, r2, r2
 800165c:	6239      	str	r1, [r7, #32]
 800165e:	415b      	adcs	r3, r3
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
 8001662:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001666:	4641      	mov	r1, r8
 8001668:	1854      	adds	r4, r2, r1
 800166a:	4649      	mov	r1, r9
 800166c:	eb43 0501 	adc.w	r5, r3, r1
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	00eb      	lsls	r3, r5, #3
 800167a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800167e:	00e2      	lsls	r2, r4, #3
 8001680:	4614      	mov	r4, r2
 8001682:	461d      	mov	r5, r3
 8001684:	4643      	mov	r3, r8
 8001686:	18e3      	adds	r3, r4, r3
 8001688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800168c:	464b      	mov	r3, r9
 800168e:	eb45 0303 	adc.w	r3, r5, r3
 8001692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80016a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016b2:	4629      	mov	r1, r5
 80016b4:	008b      	lsls	r3, r1, #2
 80016b6:	4621      	mov	r1, r4
 80016b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016bc:	4621      	mov	r1, r4
 80016be:	008a      	lsls	r2, r1, #2
 80016c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80016c4:	f7fe fd86 	bl	80001d4 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4b60      	ldr	r3, [pc, #384]	@ (8001850 <UART_SetConfig+0x4e4>)
 80016ce:	fba3 2302 	umull	r2, r3, r3, r2
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	011c      	lsls	r4, r3, #4
 80016d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80016da:	2200      	movs	r2, #0
 80016dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016e8:	4642      	mov	r2, r8
 80016ea:	464b      	mov	r3, r9
 80016ec:	1891      	adds	r1, r2, r2
 80016ee:	61b9      	str	r1, [r7, #24]
 80016f0:	415b      	adcs	r3, r3
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f8:	4641      	mov	r1, r8
 80016fa:	1851      	adds	r1, r2, r1
 80016fc:	6139      	str	r1, [r7, #16]
 80016fe:	4649      	mov	r1, r9
 8001700:	414b      	adcs	r3, r1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001710:	4659      	mov	r1, fp
 8001712:	00cb      	lsls	r3, r1, #3
 8001714:	4651      	mov	r1, sl
 8001716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800171a:	4651      	mov	r1, sl
 800171c:	00ca      	lsls	r2, r1, #3
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	4603      	mov	r3, r0
 8001724:	4642      	mov	r2, r8
 8001726:	189b      	adds	r3, r3, r2
 8001728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800172c:	464b      	mov	r3, r9
 800172e:	460a      	mov	r2, r1
 8001730:	eb42 0303 	adc.w	r3, r2, r3
 8001734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001742:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001750:	4649      	mov	r1, r9
 8001752:	008b      	lsls	r3, r1, #2
 8001754:	4641      	mov	r1, r8
 8001756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800175a:	4641      	mov	r1, r8
 800175c:	008a      	lsls	r2, r1, #2
 800175e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001762:	f7fe fd37 	bl	80001d4 <__aeabi_uldivmod>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4611      	mov	r1, r2
 800176c:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <UART_SetConfig+0x4e4>)
 800176e:	fba3 2301 	umull	r2, r3, r3, r1
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2264      	movs	r2, #100	@ 0x64
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	1acb      	subs	r3, r1, r3
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	3332      	adds	r3, #50	@ 0x32
 8001780:	4a33      	ldr	r2, [pc, #204]	@ (8001850 <UART_SetConfig+0x4e4>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800178c:	441c      	add	r4, r3
 800178e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001792:	2200      	movs	r2, #0
 8001794:	673b      	str	r3, [r7, #112]	@ 0x70
 8001796:	677a      	str	r2, [r7, #116]	@ 0x74
 8001798:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800179c:	4642      	mov	r2, r8
 800179e:	464b      	mov	r3, r9
 80017a0:	1891      	adds	r1, r2, r2
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	415b      	adcs	r3, r3
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ac:	4641      	mov	r1, r8
 80017ae:	1851      	adds	r1, r2, r1
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	4649      	mov	r1, r9
 80017b4:	414b      	adcs	r3, r1
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80017c4:	4659      	mov	r1, fp
 80017c6:	00cb      	lsls	r3, r1, #3
 80017c8:	4651      	mov	r1, sl
 80017ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ce:	4651      	mov	r1, sl
 80017d0:	00ca      	lsls	r2, r1, #3
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	4642      	mov	r2, r8
 80017da:	189b      	adds	r3, r3, r2
 80017dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017de:	464b      	mov	r3, r9
 80017e0:	460a      	mov	r2, r1
 80017e2:	eb42 0303 	adc.w	r3, r2, r3
 80017e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80017e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80017f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001800:	4649      	mov	r1, r9
 8001802:	008b      	lsls	r3, r1, #2
 8001804:	4641      	mov	r1, r8
 8001806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800180a:	4641      	mov	r1, r8
 800180c:	008a      	lsls	r2, r1, #2
 800180e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001812:	f7fe fcdf 	bl	80001d4 <__aeabi_uldivmod>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <UART_SetConfig+0x4e4>)
 800181c:	fba3 1302 	umull	r1, r3, r3, r2
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	2164      	movs	r1, #100	@ 0x64
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	3332      	adds	r3, #50	@ 0x32
 800182e:	4a08      	ldr	r2, [pc, #32]	@ (8001850 <UART_SetConfig+0x4e4>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	f003 020f 	and.w	r2, r3, #15
 800183a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4422      	add	r2, r4
 8001842:	609a      	str	r2, [r3, #8]
}
 8001844:	bf00      	nop
 8001846:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800184a:	46bd      	mov	sp, r7
 800184c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001850:	51eb851f 	.word	0x51eb851f

08001854 <__libc_init_array>:
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	4d0d      	ldr	r5, [pc, #52]	@ (800188c <__libc_init_array+0x38>)
 8001858:	4c0d      	ldr	r4, [pc, #52]	@ (8001890 <__libc_init_array+0x3c>)
 800185a:	1b64      	subs	r4, r4, r5
 800185c:	10a4      	asrs	r4, r4, #2
 800185e:	2600      	movs	r6, #0
 8001860:	42a6      	cmp	r6, r4
 8001862:	d109      	bne.n	8001878 <__libc_init_array+0x24>
 8001864:	4d0b      	ldr	r5, [pc, #44]	@ (8001894 <__libc_init_array+0x40>)
 8001866:	4c0c      	ldr	r4, [pc, #48]	@ (8001898 <__libc_init_array+0x44>)
 8001868:	f000 f818 	bl	800189c <_init>
 800186c:	1b64      	subs	r4, r4, r5
 800186e:	10a4      	asrs	r4, r4, #2
 8001870:	2600      	movs	r6, #0
 8001872:	42a6      	cmp	r6, r4
 8001874:	d105      	bne.n	8001882 <__libc_init_array+0x2e>
 8001876:	bd70      	pop	{r4, r5, r6, pc}
 8001878:	f855 3b04 	ldr.w	r3, [r5], #4
 800187c:	4798      	blx	r3
 800187e:	3601      	adds	r6, #1
 8001880:	e7ee      	b.n	8001860 <__libc_init_array+0xc>
 8001882:	f855 3b04 	ldr.w	r3, [r5], #4
 8001886:	4798      	blx	r3
 8001888:	3601      	adds	r6, #1
 800188a:	e7f2      	b.n	8001872 <__libc_init_array+0x1e>
 800188c:	080018c4 	.word	0x080018c4
 8001890:	080018c4 	.word	0x080018c4
 8001894:	080018c4 	.word	0x080018c4
 8001898:	080018c8 	.word	0x080018c8

0800189c <_init>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr

080018a8 <_fini>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	bf00      	nop
 80018ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ae:	bc08      	pop	{r3}
 80018b0:	469e      	mov	lr, r3
 80018b2:	4770      	bx	lr
