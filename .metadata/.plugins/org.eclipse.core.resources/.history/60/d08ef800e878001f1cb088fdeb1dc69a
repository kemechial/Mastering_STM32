/*
 * main.c
 *
 *  Created on: Sep 17, 2024
 *      Author: Lenovo
 */

#include <main_app.h>
#include "string.h"
#include "stdio.h"


void SystemClockConfig(uint8_t);
void Error_handler(void);
void TIM4_Init(void);
void UART1_Init(void);

UART_HandleTypeDef huart1;
uint8_t msg[100];
TIM_HandleTypeDef htim4;
uint16_t brightness = 0;


int main(void)
{
	SystemClockConfig(CLOCK_FREQ_50MHz);
//	LSE_Configuration(); // this must on top of other init functions which start port clocks, then it gives an error

	HAL_Init();
	UART1_Init();
	TIM4_Init();

	if(HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK){
		Error_handler();
	}

   while(1){
	while(brightness < htim4.Init.Period){
		brightness+=10;
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightness);
		memset(msg,0,sizeof(msg));
		sprintf((char *)msg,"TIM4 count: %d\r\n", brightness);
		HAL_UART_Transmit(&huart1,  msg, (uint16_t)  strlen((char *)msg), HAL_MAX_DELAY);

		HAL_Delay(10);
	}

	while(brightness > 0){
		brightness-=10;
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, brightness);
		memset(msg,0,sizeof(msg));
		sprintf((char *)msg,"TIM4 count: %d\r\n", brightness);
		HAL_UART_Transmit(&huart1,  msg, (uint16_t)  strlen((char *)msg), HAL_MAX_DELAY);

		HAL_Delay(10);
	}



   }

	return 0;
}

void TIM4_Init(void)
{
	TIM_OC_InitTypeDef tim4_oc_cfg;
	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 4999;
	htim4.Init.Period = 10000;

	memset(&tim4_oc_cfg,0,sizeof(tim4_oc_cfg)); //there might be garbage values
	tim4_oc_cfg.OCMode = TIM_OCMODE_PWM1;
	tim4_oc_cfg.OCPolarity = TIM_OCPOLARITY_HIGH;

	tim4_oc_cfg.Pulse = 0;

	if(HAL_TIM_PWM_Init(&htim4) != HAL_OK){
		Error_handler();
	}

    if(HAL_TIM_PWM_ConfigChannel(&htim4, &tim4_oc_cfg, TIM_CHANNEL_1)!= HAL_OK){
 		Error_handler();
 	}


}

void UART1_Init()
{
	huart1.Instance = USART1;
	huart1.Init.BaudRate = 115200;
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
	huart1.Init.StopBits = UART_STOPBITS_1;
	huart1.Init.Parity = UART_PARITY_NONE;
	huart1.Init.Mode = UART_MODE_TX_RX;
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;

	if(HAL_UART_Init(&huart1) != HAL_OK){
		Error_handler();
	}

}

void Error_handler(void)
{

   while(1);

}

void SystemClockConfig(uint8_t clock_freq)
{
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FlashLatency;

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	osc_init.HSEState = RCC_HSE_ON;
	osc_init.LSEState = RCC_LSE_ON;
	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;

    switch(clock_freq){
    	case CLOCK_FREQ_50MHz:
    		osc_init.PLL.PLLM = 25;
    		osc_init.PLL.PLLN = 100;
    		osc_init.PLL.PLLP = 2;

    		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
    									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    	    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    	    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
    	    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
    	    clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
    	    FlashLatency = FLASH_ACR_LATENCY_1WS;
         break;

     	case CLOCK_FREQ_80MHz:

     		    osc_init.PLL.PLLM = 25;
        		osc_init.PLL.PLLN = 160;
        		osc_init.PLL.PLLP = 2;

        		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
        									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
        	    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
        	    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
        	    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
        	    clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
        	    FlashLatency = FLASH_ACR_LATENCY_2WS;
             break;


     	default:
     		return;

    }

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler();
	}


	if(HAL_RCC_ClockConfig(&clk_init, FlashLatency) != HAL_OK){
			Error_handler();
		}

	__HAL_RCC_HSI_DISABLE(); //Clock powered by HSE, now can disable HSI

    //SysTick Configuration for new clock setup
	//Input value is based on HCLK that SysTick would tick every 1 ms.
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000); // one count period is 1/HCLK so it must count HCLK /1000 to get 1 ms
    //Configure clk source as HCLK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);


}

