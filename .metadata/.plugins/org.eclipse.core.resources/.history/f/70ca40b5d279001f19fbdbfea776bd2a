/*
 * main.c
 *
 *  Created on: Sep 17, 2024
 *      Author: Lenovo
 */

#include <main_app.h>
#include "string.h"
#include "stdio.h"


void SystemClockConfig(uint8_t);
void Error_handler(uint8_t);
void UART1_Init(void);
void CAN1_Init(void);
void CAN1_Tx(void);


UART_HandleTypeDef huart3;
CAN_HandleTypeDef hcan1;
uint8_t msg[100];

enum ErrorStates {
	UART_ERROR = 3,
	CLK_CFG_ERROR = 2,
	CAN_CFG_ERROR = 1,
    CAN_Tx_ERROR = 4,
	CAN_START_ERROR = 5
};



int main(void)
{
	SystemClockConfig(CLOCK_FREQ_64MHz);

	HAL_Init();
	UART1_Init();
	CAN1_Init();

	if(HAL_CAN_Start(&hcan1) != HAL_OK){
		Error_handler(CAN_START_ERROR);
	}



	while(1){
		uint8_t msg[100];


		 CAN1_Tx();
		 HAL_Delay(100);

	}




	return 0;
}



void UART1_Init()
{
	huart3.Instance = USART3;
	huart3.Init.BaudRate = 115200;
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
	huart3.Init.StopBits = UART_STOPBITS_1;
	huart3.Init.Parity = UART_PARITY_NONE;
	huart3.Init.Mode = UART_MODE_TX_RX;
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;

	if(HAL_UART_Init(&huart3) != HAL_OK){
		Error_handler(UART_ERROR);
	}

}

void Error_handler(uint8_t code)
{

   while(1){
		sprintf((char *)msg,"error code: %d\r\n", code);
			HAL_UART_Transmit(&huart3,  msg, (uint16_t)  strlen((char *)msg), HAL_MAX_DELAY);
			HAL_Delay(1000);
   }

}

void SystemClockConfig(uint8_t clock_freq)
{
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint32_t FlashLatency;

	memset(&osc_init,0,sizeof(osc_init)); //there might be garbage values
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	osc_init.HSEState = RCC_HSE_ON;
	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;

    switch(clock_freq){
    	case CLOCK_FREQ_32MHz:
    		osc_init.PLL.PLLMUL = RCC_PLL_MUL8;

    		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
    									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    	    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    	    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV2;
    	    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
    	    clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
    	    FlashLatency = FLASH_LATENCY_2;
         break;

     	case CLOCK_FREQ_64MHz:

     		osc_init.PLL.PLLMUL = RCC_PLL_MUL8;


        		clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
        									RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
        	    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
        	    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
        	    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
        	    clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
        	    FlashLatency = FLASH_LATENCY_2;
             break;


     	default:
     		return;

    }

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
		Error_handler(CLK_CFG_ERROR);
	}


	if(HAL_RCC_ClockConfig(&clk_init, FlashLatency) != HAL_OK){
			Error_handler(CLK_CFG_ERROR);
		}

	__HAL_RCC_HSI_DISABLE(); //Clock powered by HSE, now can disable HSI

    //SysTick Configuration for new clock setup
	//Input value is based on HCLK that SysTick would tick every 1 ms.
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000); // one count period is 1/HCLK so it must count HCLK /1000 to get 1 ms
    //Configure clk source as HCLK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);


}

void CAN1_Init(void)
{
	memset(&hcan1,0,sizeof(hcan1)); //there might be garbage values
	hcan1.Instance = CAN1;
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
	hcan1.Init.AutoBusOff = DISABLE;
	hcan1.Init.AutoRetransmission = ENABLE;
	hcan1.Init.AutoWakeUp = DISABLE;
	hcan1.Init.ReceiveFifoLocked = DISABLE;
	hcan1.Init.TimeTriggeredMode = DISABLE;
	hcan1.Init.TransmitFifoPriority = DISABLE;

	//Settings for CAN bit timing
	hcan1.Init.Prescaler = 2;
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;


	if( HAL_CAN_Init(&hcan1) != HAL_OK){
			Error_handler(CAN_CFG_ERROR);
		}

}

void CAN1_Tx(void)
{
	CAN_TxHeaderTypeDef TxHeader;

    uint8_t msg[5] = {'H','E','L','L','O'};

    uint32_t TxMailbox;

	memset(&TxHeader,0,sizeof(TxHeader)); //there might be garbage values
	TxHeader.DLC = 5;
	TxHeader.StdId = 0x65D;
	TxHeader.IDE = CAN_ID_STD;
	TxHeader.RTR =  CAN_RTR_DATA;

	if( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, msg, &TxMailbox) != HAL_OK){
		Error_handler(CAN_Tx_ERROR);
	}

	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
	sprintf((char *)msg,"Message transmitted\r\n");
			HAL_UART_Transmit(&huart3,  msg, (uint16_t)  strlen((char *)msg), HAL_MAX_DELAY);



}

